<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Metaprogramming on Andy Ibanez</title><link>https://www.andyibanez.com/tags/metaprogramming/</link><description>Recent content in Metaprogramming on Andy Ibanez</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 06 May 2020 22:24:46 -0400</lastBuildDate><atom:link href="https://www.andyibanez.com/tags/metaprogramming/index.xml" rel="self" type="application/rss+xml"/><item><title>Quick Introduction Reflection in Swift</title><link>https://www.andyibanez.com/posts/quick-introduction-reflection-swift/</link><pubDate>Wed, 06 May 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/quick-introduction-reflection-swift/</guid><description>&lt;p>If you have been programming for a few years, you have undoubtedly come across the term &lt;em>Reflection&lt;/em>. This feature allows us to inspect and work with the members of a type.&lt;/p>
&lt;p>if this doesn&amp;rsquo;t make sense, suppose you wanted to check &lt;em>what&lt;/em> members a type has. How would you do this? Ideally you&amp;rsquo;d like to iterate over its members and print them. This is a very basic application of Reflection, but it should let think of other potential uses for it.&lt;/p></description></item></channel></rss>
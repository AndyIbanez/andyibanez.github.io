<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Function Builders on Andy Ibanez</title><link>https://www.andyibanez.com/tags/function-builders/</link><description>Recent content in Function Builders on Andy Ibanez</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 11 Mar 2020 07:00:00 -0400</lastBuildDate><atom:link href="https://www.andyibanez.com/tags/function-builders/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding Function Builders in Swift</title><link>https://www.andyibanez.com/posts/understanding-function-builders/</link><pubDate>Wed, 11 Mar 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/understanding-function-builders/</guid><description>&lt;p>WWDC2020 is just around the corner*, and it hasn&amp;rsquo;t been one year since WWDC2019 took place. There is still a lot of ground to cover regarding the new tools and APIs demonstrated then. and In this article we will focus on a feature new to Swift itself: Function Builders.&lt;/p>
&lt;p>&lt;em>*: Maybe. :(&lt;/em>&lt;/p>
&lt;p>If you have been hacking away at SwiftUI, you have probably been wondering how it makes it possible to build great UIs with very nice syntactic sugar. Other than &lt;a href="https://www.andyibanez.com/posts/understanding-property-wrappers-swift/">property wrappers&lt;/a>, SwiftUI is also possible thanks to Function Builders. In this article, we will briefly mention how SwiftUI uses Function Builders, and later we will create our own function builders that have nothing not do with SwiftUI. This way, it will become evident why Function Builders are really neat, and why they don&amp;rsquo;t have to be strictly tied to SwiftUI.&lt;/p></description></item></channel></rss>
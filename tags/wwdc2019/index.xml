<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wwdc2019 on Andy Ibanez</title><link>https://www.andyibanez.com/tags/wwdc2019/</link><description>Recent content in Wwdc2019 on Andy Ibanez</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 11 Mar 2020 07:00:00 -0400</lastBuildDate><atom:link href="https://www.andyibanez.com/tags/wwdc2019/index.xml" rel="self" type="application/rss+xml"/><item><title>Understanding Function Builders in Swift</title><link>https://www.andyibanez.com/posts/understanding-function-builders/</link><pubDate>Wed, 11 Mar 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/understanding-function-builders/</guid><description>&lt;p>WWDC2020 is just around the corner*, and it hasn&amp;rsquo;t been one year since WWDC2019 took place. There is still a lot of ground to cover regarding the new tools and APIs demonstrated then. and In this article we will focus on a feature new to Swift itself: Function Builders.&lt;/p>
&lt;p>&lt;em>*: Maybe. :(&lt;/em>&lt;/p>
&lt;p>If you have been hacking away at SwiftUI, you have probably been wondering how it makes it possible to build great UIs with very nice syntactic sugar. Other than &lt;a href="https://www.andyibanez.com/posts/understanding-property-wrappers-swift/">property wrappers&lt;/a>, SwiftUI is also possible thanks to Function Builders. In this article, we will briefly mention how SwiftUI uses Function Builders, and later we will create our own function builders that have nothing not do with SwiftUI. This way, it will become evident why Function Builders are really neat, and why they don&amp;rsquo;t have to be strictly tied to SwiftUI.&lt;/p></description></item><item><title>Recognizing Speech Locally on an iOS Device Using the Speech Framework</title><link>https://www.andyibanez.com/posts/speech-recognition-sfspeechrecognizer/</link><pubDate>Wed, 29 Jan 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/speech-recognition-sfspeechrecognizer/</guid><description>&lt;p>As iOS becomes more advanced, features that we thought belonged to the long future start becoming more common place in today&amp;rsquo;s software. One such feature is speech recognition, which allows a device to take verbal input from a user, transcribe it into text, and do something with it.&lt;/p>
&lt;p>In iOS, we can do this using a framework called &lt;code>Speech&lt;/code>, and an object called &lt;code>SFSpeechRecognizer&lt;/code>. With this class, you can perform all kinds of speech recognition tasks.&lt;/p></description></item><item><title>CryptoKit and the Secure Enclave</title><link>https://www.andyibanez.com/posts/cryptokit-secure-enclave/</link><pubDate>Wed, 15 Jan 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/cryptokit-secure-enclave/</guid><description>&lt;p>CryptoKit and the Secure Enclave&lt;/p>
&lt;p>Apple&amp;rsquo;s &lt;a href="https://www.andyibanez.com/posts/common-cryptographic-operations-with-cryptokit/">CryptoKit&lt;/a> introduced this year is full of amazing features. Not only does it offer very easy to use cryptography, but it also offers an interface to a security feature that Apple introduced less than a decade ago: The Secure Enclave.&lt;/p>
&lt;p>The Secure Enclave is a hardware feature for helping the system work with cryptographically secure data. In this article, we will build upon our previous CryptoKit knowledge (see the article linked above), and we will also learn what the Secure Enclave is all about.&lt;/p></description></item><item><title>Implementing Parametrizable Shortcut Actions for your iOS Apps</title><link>https://www.andyibanez.com/posts/parametrized-shortcuts/</link><pubDate>Wed, 08 Jan 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/parametrized-shortcuts/</guid><description>&lt;p>All the way back to 2016, a group of very talented iOS developers released &lt;a href="workflow.is">Workflow&lt;/a>, a very popular app to let users create actions of different kinds within the system&amp;rsquo;s constraints. You could create and automate different tasks, such as controlling a server via SSH, downloading all the images from a website, and more&amp;hellip; Much, much more.&lt;/p>
&lt;p>Apple saw the power of the app and &lt;a href="https://techcrunch.com/2017/03/22/apple-has-acquired-workflow-a-powerful-automation-tool-for-ipad-and-iphone/">acquired&lt;/a> it in March 2017. This was very exciting, but we didn&amp;rsquo;t hear anything from the app since. Until WWDC 2018. Apple revealed a new app: Shortcuts. This app was built on top of Workflow, and as an Apple app, it allowed it to do many things that Workflow just wasn&amp;rsquo;t allowed to do, such as toggling system settings, integrating it with other apps (!!), and it was also natively integrated into Siri.&lt;/p></description></item><item><title>Modern Backgrounds Tasks in iOS 13</title><link>https://www.andyibanez.com/posts/modern-background-tasks-ios13/</link><pubDate>Wed, 25 Dec 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/modern-background-tasks-ios13/</guid><description>&lt;p>In the &lt;a href="https://www.andyibanez.com/posts/background-execution-in-ios/">article from last week&lt;/a>, we explored the basic background execution APIs introduced since iOS 7. We explored how we could request additional time for a task to complete after entering the background, how we could defer downloads with URLSession, and how we could use silent push notifications to trigger background tasks.&lt;/p>
&lt;p>The story with background tasks does not end there. iOS 13 introduced more APIs to do better background tasks, and that allow you to do things that weren&amp;rsquo;t possible before. Apple gave us the new shiny &lt;a href="https://developer.apple.com/documentation/backgroundtasks">&lt;code>BackgroundTasks&lt;/code>&lt;/a> framework on WWDC2019. This framework gives developers more flexibility and less constraints to execute code while their apps are in the background. Not only that, but the old Background App Refresh APIs have now been deprecated in favor of a new, modern way to perform them for your app. This changes unifies with the new Background Processing tasks which lets you do more work in the background, while a device is charging, and more.&lt;/p></description></item><item><title>Formatting Relative Dates With RelativeDateTimeFormatter</title><link>https://www.andyibanez.com/posts/formatting-relative-dates-relativedatetimeformatter/</link><pubDate>Wed, 11 Dec 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/formatting-relative-dates-relativedatetimeformatter/</guid><description>&lt;p>Formatting Relative Dates With RelativeDateTimeFormatter&lt;/p>
&lt;p>A few weeks ago we talked about &lt;a href="https://www.andyibanez.com/posts/nsformatter/">formatting content with NSFormatter&lt;/a>, an abstract class from which multiple formatting classes inherit from to allow you to format different kinds of data in a human-readable form. &lt;code>NSFormatter&lt;/code> is not only a class you can inherit from yourself, but as iOS evolves, more formatters will be added to its family. This week, we will explore a new member of this family introduced in iOS 13: &lt;code>RelativeDateTimeFormatter&lt;/code>.&lt;/p></description></item><item><title>UserDefaults and Property Wrappers</title><link>https://www.andyibanez.com/posts/nsuserdefaults-property-wrappers/</link><pubDate>Wed, 04 Dec 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/nsuserdefaults-property-wrappers/</guid><description>&lt;hr>
**Important Note**
&lt;p>Soon after I published this article, Christian Tietze wrote a fair criticism of this idea &lt;a href="https://christiantietze.de/posts/2019/12/userdefaults-property-wrappers/">here&lt;/a>.&lt;/p>
&lt;p>Once you understand how property wrappers work, you can use this article to apply it to user defaults. The main idea is that property wrappers allow you to store your values differently and even externally. That said, you may or may not want to implement this in a real app. I recommend you read this article first, and then go back to Christian&amp;rsquo;s to see more downsides of this idea other than the ones I mentioned below.&lt;/p></description></item><item><title>Understanding Property Wrappers in Swift</title><link>https://www.andyibanez.com/posts/understanding-property-wrappers-swift/</link><pubDate>Wed, 27 Nov 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/understanding-property-wrappers-swift/</guid><description>&lt;p>Swift 5.1 introduced a sleuth of wonderful features, and amongst them, there&amp;rsquo;s one that is essential for SwiftUI: Property Wrappers. Property wrappers are a powerful feature in Swift that allow you to wrap behavior along with properties. This allows us to do some interesting things. If you have seen SwiftUI, you&amp;rsquo;ve seen the &lt;code>@State&lt;/code> &amp;ldquo;keyword&amp;rdquo;, and you know that it allows you to modify structs. This is possible thanks to the behavior &amp;ldquo;wrapped&amp;rdquo; within properties marked with it.&lt;/p></description></item><item><title>New Search APIs in iOS 13</title><link>https://www.andyibanez.com/posts/ios13-new-search-apis/</link><pubDate>Wed, 13 Nov 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/ios13-new-search-apis/</guid><description>&lt;p>iOS has always provided interesting search APIs, but they have always been limited and doing the most interesting tasks required you to either write your own implementation or use private APIs.&lt;/p>
&lt;p>iOS 13 has provided some very nice improvements to the UI search APIs. In this article we will talk about two of them.&lt;/p>
&lt;h1 id="uisearchbar-finally-exposes-its-text-field">UISearchBar finally exposes its text field&lt;/h1>
&lt;p>I have been using &lt;code>UISearchController&lt;/code> and &lt;code>UISearchBar&lt;/code> for a &lt;em>very&lt;/em> long time, and I have always found it bizarre that Apple didn&amp;rsquo;t expose its underlying text field property. As of iOS 13, the search bar finally exposes it, in the form of a &lt;a href="https://developer.apple.com/documentation/uikit/uisearchtextfield">&lt;code>UISearchTextField&lt;/code>&lt;/a> object.&lt;/p></description></item><item><title>When CryptoKit is not Enough</title><link>https://www.andyibanez.com/posts/cryptokit-not-enough/</link><pubDate>Wed, 06 Nov 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/cryptokit-not-enough/</guid><description>&lt;p>&lt;em>This article is a continuation to my &lt;a href="https://www.andyibanez.com/posts/common-cryptographic-operations-with-cryptokit/%5D">Common Cryptographic Operations with CryptoKit&lt;/a> article. If you want to learn how to use CryptoKit, read that one instead, and come to this one when you need a feature not offered by it.&lt;/em>&lt;/p>
&lt;p>As I have been playing with the amazing CryptoKit framework in the past few weeks, I have discovered a few more things that CryptoKit currently doesn&amp;rsquo;t do. This is not generally a bad thing, and I &lt;em>think&lt;/em> these limitations are related to what seem to be the goal of the framework:&lt;/p></description></item><item><title>Common Cryptographic Operations With CryptoKit</title><link>https://www.andyibanez.com/posts/common-cryptographic-operations-with-cryptokit/</link><pubDate>Wed, 09 Oct 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/common-cryptographic-operations-with-cryptokit/</guid><description>&lt;p>Apple has always taken security very seriously, so it&amp;rsquo;s expected that they would provide developers with the same tools they have to help developers implement the same security measures in their apps. This year, Apple introduced &lt;code>CryptoKit&lt;/code>.&lt;/p>
&lt;p>Apple providing new cryptography tools is nothing new. They have provided the &lt;code>Security&lt;/code> framework for a &lt;em>very&lt;/em> long time, and a few years later they introduced &lt;code>CommonCrypto&lt;/code>. The problem with these frameworks is that they can be very low level, being written in C, and it can be intimidating for new developers to adopt them in their project. &lt;code>CryptoKit&lt;/code> abstracts a lot of the details and it provides easier interfaces for common operations such as hashing, encrypting, and even signing.&lt;/p></description></item><item><title>Playing Custom Haptics on iOS</title><link>https://www.andyibanez.com/posts/playing-custom-haptics-on-ios/</link><pubDate>Wed, 02 Oct 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/playing-custom-haptics-on-ios/</guid><description>&lt;p>Vibration and physical feedback has become an important feature of Apple&amp;rsquo;s operating systems. Starting with the Apple Watch, Apple replaced the traditional vibration feedback with haptic feedback hardware, which allowed them to have more control over how vibrations and physical feedback work.&lt;/p>
&lt;p>First being introduced in the Apple Watch, Haptic Feedback has been a core part of the Apple ecosystem experience since. Just think about it, wouldn&amp;rsquo;t it be weird if you force-touched the screen to do something, and there was no physical response from the device? Think of the old Peek-and-Pop. If you updated to iOS 13 and got context menus, you may feel they feel great to do in iOS (because they have a haptic engine), but on iPad they feel lacking because the device doesn&amp;rsquo;t vibrate when triggering them.&lt;/p></description></item><item><title>Understanding the Essentials for Adopting Multiwindow Support on iPadOS</title><link>https://www.andyibanez.com/posts/ipad-multiwindow-support/</link><pubDate>Wed, 18 Sep 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/ipad-multiwindow-support/</guid><description>&lt;p>On WWDC2019, Apple decided to fork iOS into two different operating systems: iOS for iPhones, and iPadOS for iPads. This is to recognize the iPad as its own independent entity that has its own set of features compared to iOS. Amongst those features, iPadOS adds Multiwindow support, which allows our apps to run in more than one Window at the same time.&lt;/p>
&lt;h1 id="what-exactly-is-multi-window-support-and-how-does-it-work">What exactly is Multi-window support, and how does it work?&lt;/h1>
&lt;p>iOS 9 introduced the Slide Over and Split Screen features for iPad, which allowed us to run two different apps side by side at the same time. Multi-window support on iPadOS allows you to do this with two windows of your own app, and more.&lt;/p></description></item><item><title>Understanding the Result Type in Swift</title><link>https://www.andyibanez.com/posts/swift-result-type/</link><pubDate>Wed, 11 Sep 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/swift-result-type/</guid><description>&lt;p>Error handling when expecting a result out of an operation is a very common thing to do. For this reason, various high-level programming languages have introduced a &lt;code>Result&lt;/code> type into their libraries, on top of their existing error-handling features. This feature was implemented in Swift 5.&lt;/p>
&lt;p>A &lt;code>Result&lt;/code> wraps a success or a failure. It is essentially an &lt;code>enum&lt;/code> with two possible cases: &lt;code>.success&lt;/code> and &lt;code>.failure&lt;/code>. The &lt;code>.success&lt;/code> case wraps the correct result of an operation, whereas a &lt;code>.failure&lt;/code> wraps an &lt;code>Error&lt;/code>. Its implementation uses generics, so you always know what you are going to get back.&lt;/p></description></item></channel></rss>
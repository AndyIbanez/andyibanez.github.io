<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ArgumentParser on Andy Ibanez</title><link>https://www.andyibanez.com/tags/argumentparser/</link><description>Recent content in ArgumentParser on Andy Ibanez</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 22 Apr 2020 07:00:00 -0400</lastBuildDate><atom:link href="https://www.andyibanez.com/tags/argumentparser/index.xml" rel="self" type="application/rss+xml"/><item><title>Writing Command Line Tools in Swift Using ArgumentParser, Part 6: Releasing And Installing Our Command Line Tool</title><link>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part6/</link><pubDate>Wed, 22 Apr 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part6/</guid><description>&lt;p>I wasn&amp;rsquo;t sure if I should include this article as part of this series. But for the sake of completion, I decided to include it. This article is very short, but it tells us how to actually install our own tool in a system so we can start using it without writing its full path.&lt;/p>
&lt;p>To recap, and before I end my series in Swift&amp;rsquo;s &lt;code>ArgumentParser&lt;/code>, let&amp;rsquo;s give a quick overview of everything we have learned so far:&lt;/p></description></item><item><title>Writing Command Line Tools in Swift Using ArgumentParser, Part 5: Tools with Asynchronous APIs</title><link>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part5/</link><pubDate>Wed, 15 Apr 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part5/</guid><description>&lt;p>In the past four weeks we have explored many of the features available to us via ArgumentParser and how to use them. Here&amp;rsquo;s a recap of everything we learned so far:&lt;/p>
&lt;ul>
&lt;li>We learned the &lt;a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part1/">very basics&lt;/a>&lt;/li>
&lt;li>We learned how to &lt;a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part2/">validate user input&lt;/a>&lt;/li>
&lt;li>We explored a way to &lt;a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part3/">separate our tool into subcommands&lt;/a>.&lt;/li>
&lt;li>And finally, we learned how we can &lt;a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part4/">improve our documentation pages&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>In this article, we will not explore a feature exposed to us via ArgumentParser. Instead, we will learn how to do something very essential: Creating tools that require asynchronous APIs.&lt;/p></description></item><item><title>Writing Command Line Tools in Swift Using ArgumentParser, Part 4: Customizing Help</title><link>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part4/</link><pubDate>Wed, 08 Apr 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part4/</guid><description>&lt;p>Writing Command Line Tools in Swift Using ArgumentParser, Part 4: Customizing Help&lt;/p>
&lt;p>In the past few weeks, we have explored how to use &lt;code>ArgumentParser&lt;/code> and many of its features. It&amp;rsquo;s great that &lt;code>ArgumentParser&lt;/code> provides a lot of functionality for free, but it wouldn&amp;rsquo;t make sense to build great tools that users can&amp;rsquo;t figure out how to use. This week is all about that.&lt;/p>
&lt;p>We saw how &lt;code>ArgumentParser&lt;/code> can build a lot of documentation for free, but we can actually do more. This week, we will explore how we can improve the documentation generated for our command line tools.&lt;/p></description></item><item><title>Writing Command Line Tools in Swift Using ArgumentParser, Part 3: Subcommands</title><link>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part3/</link><pubDate>Wed, 01 Apr 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part3/</guid><description>&lt;p>We have been having a lot of fun with ArgumentParser in the last two weeks, and the fun is not about to end any time soon. We have explored how we can &lt;a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part1/">build basic commands with the basic building blocks of the framework&lt;/a>, and how we can perform &lt;a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part2/">advanced validation and error handling&lt;/a>. This week, we will something very useful: Subcommands.&lt;/p>
&lt;h1 id="subcommands">Subcommands&lt;/h1>
&lt;p>If you have used &lt;code>git&lt;/code> directly from the command line before, you have used subcommands before.&lt;/p></description></item><item><title>Writing Command Line Tools in Swift Using ArgumentParser, Part 2: Validation &amp; Errors</title><link>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part2/</link><pubDate>Wed, 25 Mar 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part2/</guid><description>&lt;p>&lt;a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part1/">Last week&lt;/a> we explored how we can build a simple command line tool. We learned how to use &lt;code>@Argument&lt;/code>, &lt;code>@Option&lt;/code>, and &lt;code>@Flag&lt;/code> as the building blocks for &lt;code>ArgumentParser&lt;/code> command line tools. We we saw last week was enough to build many simple tools, but there&amp;rsquo;s still a lot to explore, and cool things to learn.&lt;/p>
&lt;p>This week we will learn about input validation and errors, so we can build better tools that take more constrained parameters when relevant.&lt;/p></description></item><item><title>Writing Command Line Tools in Swift Using ArgumentParser, Part 1: Introduction &amp; Basic Usage</title><link>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part1/</link><pubDate>Wed, 18 Mar 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part1/</guid><description>&lt;p>A few weeks ago, the Swift project introduced the &lt;code>ArgumentParser&lt;/code> package. This package makes it easy to write command line tools by providing automatic parsing, documentation generation, and more.&lt;/p>
&lt;p>In this article, we will explore &lt;a href="https://swift.org/blog/argument-parser/">&lt;code>ArgumentParser&lt;/code>&lt;/a>, and how we can start building some command line tools with it, using the basic building blocks, which are three Property Wrappers called &lt;code>Argument&lt;/code>, &lt;code>Option&lt;/code>, and &lt;code>Flag&lt;/code>.&lt;/p>
&lt;h1 id="project-configuration">Project Configuration&lt;/h1>
&lt;p>Open Xcode and create a new project of type &amp;ldquo;Command Line Tool&amp;rdquo;. You cannot use this project type for iOS/iPadOS, so if you don&amp;rsquo;t find it, head over to the Mac tab.&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Swiftui on Andy Ibanez</title><link>https://www.andyibanez.com/tags/swiftui/</link><description>Recent content in Swiftui on Andy Ibanez</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 12 May 2021 07:00:00 -0400</lastBuildDate><atom:link href="https://www.andyibanez.com/tags/swiftui/index.xml" rel="self" type="application/rss+xml"/><item><title>Integrating FaceID/TouchID with SwiftUI</title><link>https://www.andyibanez.com/posts/integrating-face-id-touch-id-swiftui/</link><pubDate>Wed, 12 May 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/integrating-face-id-touch-id-swiftui/</guid><description>&lt;p>As SwiftUI is still relatively new, and it is not clear yet for many people how to use MVVM on iOS, I decided to write this short article in which I explain how one would integrate Face ID/Touch ID with SwiftUI.&lt;/p>
&lt;p>Let&amp;rsquo;s remember that SwiftUI uses the MVVM design pattern over the traditional MVC, and this can be confusing for people who are migrating to the new pattern for the first time. That said, the main takeaway from this article is to understand that views get destroyed and rebuilt &lt;em>very&lt;/em> often in SwiftUI, and therefore the right place to write this kind of logic is in the &lt;code>ViewModel&lt;/code>&lt;/p></description></item><item><title>Using CoreLocation With SwiftUI</title><link>https://www.andyibanez.com/posts/using-corelocation-with-swiftui/</link><pubDate>Wed, 17 Mar 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/using-corelocation-with-swiftui/</guid><description>&lt;p>SwiftUI forces us to change our way of thinking when building iOS apps. It makes us change from writing our apps in MVC to MVVM.&lt;/p>
&lt;p>In this article, we will explore how SwiftUI can be used with certain frameworks that aren&amp;rsquo;t &amp;ldquo;SwiftUI ready&amp;rdquo;. While this article uses CoreLocation as an example, keep in mind that you can use what you learn from this to integrate almost any other framework with SwiftUI, whether it is provided by Apple or not.&lt;/p></description></item><item><title>Using ASWebAuthenticationSession with SwiftUI</title><link>https://www.andyibanez.com/posts/using-aswebauthenticationaession-swiftui/</link><pubDate>Wed, 02 Sep 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/using-aswebauthenticationaession-swiftui/</guid><description>&lt;p>Working with REST APIs you have no control over can be a little monotonous. This is especially for OAuth 2.0 API that need you to do a little bit of setup, get your API keys with the service provider, and then you need to do the setup on your app&amp;rsquo;s size: Configure your URL scheme, deal with that URL Scheme, and write code that does something when your app gets called with that URL.&lt;/p></description></item><item><title>Adding Custom SwiftUI Views and Modifiers to the Xcode Library</title><link>https://www.andyibanez.com/posts/custom-views-modifiers-xcode-library-swiftui/</link><pubDate>Wed, 29 Jul 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/custom-views-modifiers-xcode-library-swiftui/</guid><description>&lt;p>Xcode 12 introduces the ability for developers to add their own SwiftUI views and modifiers to the Xcode library. This allows people using your code to discover your custom views, makes your codebase easier to learn, and it allows you to visually edit complex views visually rather than with code.&lt;/p>
&lt;p>In this short article we will explore how we can add our own views and modifiers to the Xcode library.&lt;/p></description></item></channel></rss>
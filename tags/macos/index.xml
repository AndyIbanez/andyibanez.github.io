<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Macos on Andy Ibanez</title><link>https://www.andyibanez.com/tags/macos/</link><description>Recent content in Macos on Andy Ibanez</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Wed, 29 Sep 2021 07:00:00 -0400</lastBuildDate><atom:link href="https://www.andyibanez.com/tags/macos/index.xml" rel="self" type="application/rss+xml"/><item><title>The Mysterious CodableWithConfiguration Protocol</title><link>https://www.andyibanez.com/posts/the-mysterious-codablewithconfiguration-protocol/</link><pubDate>Wed, 29 Sep 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/the-mysterious-codablewithconfiguration-protocol/</guid><description>&lt;p>The Mysterious CodableWithConfiguration Protocol&lt;/p>
&lt;p>Every year, at WWDC, Apple gives us a lot of new things to play around with. For the big new things, they prepare session videos and labs so developers can experiment with the new technologies and hopefully integrate them in their apps by the time the new OSes are out.&lt;/p>
&lt;p>The &amp;ldquo;big things&amp;rdquo; are one thing, but Apple introduces &lt;em>a bunch&lt;/em> of new APIs every year. Many (oh boy, &lt;strong>many&lt;/strong>) of them do not get any coverage at WWDC at all. Not in a session, and sometimes not even a small mention of them anywhere.&lt;/p></description></item><item><title>Modern Swift Concurrency Summary, Cheatsheet, and Thanks</title><link>https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/</link><pubDate>Wed, 08 Sep 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/</guid><description>&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Group Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;li>&lt;strong>Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/strong>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>Since WWDC21, we have talked, extensively, about all the new concurrency features introduced in Swift 5.5. We covered &lt;em>a lot&lt;/em> of topics, so I decided to finish off this series writing a summary article were we cover the most important topics of each article. Links will be given to the relevant articles when necessary in case this summary is not enough.&lt;/p></description></item><item><title>Using AsyncSequence in Swift</title><link>https://www.andyibanez.com/posts/using-asyncsequence-in-swift/</link><pubDate>Wed, 01 Sep 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/using-asyncsequence-in-swift/</guid><description>&lt;ul>
&lt;li>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift Article Series&lt;/a>.*&lt;/li>
&lt;/ul>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Group Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;strong>Using AsyncSequence in Swift&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/">Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>Along the new concurrency APIs introduced in Swift at WWDC2021, we have AsyncSequence. &lt;code>AsyncSequence&lt;/code> is a collection protocol that allow us to receive data in loops and even top higher order functions - such as &lt;code>filter&lt;/code>, &lt;code>map&lt;/code> and &lt;code>reduce&lt;/code> - asynchronously, being able to &lt;code>await&lt;/code> for new data as it becomes available.&lt;/p></description></item><item><title>Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model</title><link>https://www.andyibanez.com/posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model/</link><pubDate>Wed, 18 Aug 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model/</guid><description>&lt;p>&lt;em>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift Article Series&lt;/a>.&lt;/em>&lt;/p>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Task Groups in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;strong>Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/">Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>Sharing Data Across Tasks with @TaskLocal with the new Swift Concurrency Model&lt;/p></description></item><item><title>@MainActor and Global Actors in Swift</title><link>https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/</link><pubDate>Wed, 11 Aug 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/</guid><description>&lt;p>&lt;em>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift Article Series&lt;/a>.&lt;/em>&lt;/p>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Task Groups in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;strong>@MainActor and Global Actors in Swift&lt;/strong>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/">Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>We have recently talked about &lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">actors&lt;/a>, what they are, and how to use them. If you remember, an actor controls access to its properties, so a member doesn&amp;rsquo;t get written from different processes at the same time, avoiding corrupted data.&lt;/p></description></item><item><title>Understanding Actors in the New Concurrency Model in Swift</title><link>https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/</link><pubDate>Wed, 04 Aug 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/</guid><description>&lt;p>&lt;em>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift Article Series&lt;/a>.&lt;/em>&lt;/p>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Task Groups in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;strong>Understanding Actors in the New Concurrency Model in Swift&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/">Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>When we are working with concurrency, the most common problem developers face are data races. Whether it is a task updating a value at the same time another task is reading it or two tasks writing a value so that it it has an invalid value, data races are probably the main pain point of concurrency. Data races are very easy create, and hard to debug. There are entire books dedicated to the problem of data races and established patterns to avoid them.&lt;/p></description></item><item><title>Unstructured Concurrency With Detached Tasks in Swift</title><link>https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/</link><pubDate>Wed, 28 Jul 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/</guid><description>&lt;p>&lt;em>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift Article Series&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;em>This article was originally written creating examples using Xcode 13 beta 1. The article, code samples, and provided sample project have been updated for Xcode 13 beta 3.&lt;/em>&lt;/p>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Task Groups in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;strong>Unstructured Concurrency With Detached Tasks in Swift&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/">Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;em>Understanding async tasks is a requirement to read this article. If you don&amp;rsquo;t understand async tasks, you can read the &lt;a href="">Introduction to Unstructured Concurrency in Swift&lt;/a> article from this Article Series&lt;/em>&lt;/p></description></item><item><title>Introduction to Unstructured Concurrency in Swift</title><link>https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/</link><pubDate>Wed, 14 Jul 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/</guid><description>&lt;p>&lt;em>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift Article Series&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;em>This article was originally written creating examples using Xcode 13 beta 1. The article, code samples, and provided sample project have been updated for Xcode 13 beta 3.&lt;/em>&lt;/p>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Task Groups in Swift&lt;/a>&lt;/li>
&lt;li>&lt;strong>Introduction to Unstructured Concurrency in Swift&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/">Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;em>Understanding Structured Concurrency in Swift is a pre-requisite to read this article. If you aren&amp;rsquo;t familiar with that concept, feel free to read the &lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Beginning Concurrency in Swift: Structured Concurrency and async-let&lt;/a> and &lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Group Tasks in Swift&lt;/a> articles of this series.&lt;/em>&lt;/p></description></item><item><title>Structured Concurrency With Task Groups in Swift</title><link>https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/</link><pubDate>Wed, 07 Jul 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/</guid><description>&lt;p>&lt;em>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift Article Series&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;em>This article was originally written creating examples using Xcode 13 beta 1. The article, code samples, and provided sample project have been updated for Xcode 13 beta 3.&lt;/em>&lt;/p>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;strong>Structured Concurrency With Task Groups in Swift&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;em>Understanding Structured Concurrency and &lt;code>async let&lt;/code> is a pre-requisite to read this article. If you aren&amp;rsquo;t familiar with that concept, feel free to read the third part of this article series: &lt;a href="">Beginning Concurrency in Swift: Structured Concurrency and async-let&lt;/a>.&lt;/em>&lt;/p></description></item><item><title>Structured Concurrency in Swift: Using async let</title><link>https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/</link><pubDate>Wed, 30 Jun 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/</guid><description>&lt;p>&lt;em>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift&lt;/a> article series.&lt;/em>&lt;/p>
&lt;p>&lt;em>This article was originally written creating examples using Xcode 13 beta 1. The article, code samples, and provided sample project have been updated for Xcode 13 beta 3.&lt;/em>&lt;/p>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;strong>Structured Concurrency in Swift: Using async let&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Task Groups in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/">Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;em>Understanding async/await is a pre-requisite to read this article. If you aren&amp;rsquo;t familiar with that concept, feel free to read the first part of this article series: &lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>.&lt;/em>&lt;/p></description></item><item><title>Converting closure-based code into async/await in Swift</title><link>https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/</link><pubDate>Wed, 23 Jun 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/</guid><description>&lt;p>&lt;em>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift&lt;/a> article series.&lt;/em>&lt;/p>
&lt;p>&lt;em>This article was originally written creating examples using Xcode 13 beta 1. The article, code samples, and provided sample project have been updated for Xcode 13 beta 3.&lt;/em>&lt;/p>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;strong>Converting closure-based code into async/await in Swift&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Task Groups in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/">Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;em>To better benefit from this article, you should be familiar with async/await. If you aren&amp;rsquo;t, feel free to read the first part of this article series: &lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>.&lt;/em>&lt;/p></description></item><item><title>Understanding async/await in Swift</title><link>https://www.andyibanez.com/posts/understanding-async-await-in-swift/</link><pubDate>Wed, 16 Jun 2021 07:01:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/understanding-async-await-in-swift/</guid><description>&lt;p>&lt;em>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift&lt;/a> article series.&lt;/em>&lt;/p>
&lt;p>&lt;em>This article was originally written creating examples using Xcode 13 beta 1. The article, code samples, and provided sample project have been updated for Xcode 13 beta 3.&lt;/em>&lt;/p>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;strong>Understanding async/await in Swift&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Group Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/">Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>Before you try to dive in with concurrency in Swift, you need to understand async/await. There&amp;rsquo;s no way around it. While async/await are not the only &lt;a href="https://www.andyibanez.com/posts/multithreading-options-on-apple-platforms/">concurrency options&lt;/a>, Apple&amp;rsquo;s SDKs are starting to make heavy use of them. There is no doubt that third-party library providers will start offering these as well.&lt;/p></description></item><item><title>Modern Concurrency in Swift: Introduction</title><link>https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/</link><pubDate>Wed, 16 Jun 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>&lt;em>This article series was originally written creating examples using Xcode 13 beta 1. The articles in the series, code samples, and provided sample projects have been updated for Xcode 13 beta 3.&lt;/em>&lt;/p>
&lt;p>This is a tutorial series focused on the new async/await APIs Apple introduced in WWDC2021. I do not know how many articles it is going to have yet, but they will be posted in the upcoming weeks.&lt;/p></description></item><item><title>Multithreading Options on Apple Platforms</title><link>https://www.andyibanez.com/posts/multithreading-options-on-apple-platforms/</link><pubDate>Wed, 24 Feb 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/multithreading-options-on-apple-platforms/</guid><description>&lt;p>We have reached the point in which computers are really fast. Especially Apple&amp;rsquo;s, as they have control of both the hardware and software, so, oftentimes, some tasks that could be sped up with multithreading, are not necessary anymore. But, for those cases when you do need multithreading, we have many options available.&lt;/p>
&lt;p>On Apple&amp;rsquo;s platforms there is a surprising amount of concurrency tools. You are likely familiar with the most used one, the Grand Central Dispatch, &lt;code>DispatchQueue&lt;/code>, which is pretty good and it covers the vast majority of use cases. But there are some tasks that can be done easier with other tools.&lt;/p></description></item><item><title>Intercepting iOS Network Request Calls with Proxyman</title><link>https://www.andyibanez.com/posts/intercepting-ios-network-request-calls-proxyman/</link><pubDate>Wed, 10 Feb 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/intercepting-ios-network-request-calls-proxyman/</guid><description>&lt;p>Intercepting iOS Network Request Calls with Proxyman&lt;/p>
&lt;p>Working with network APIs can be tricky, especially when debugging. You oftentimes have to ask yourself if your app is sending and receiving the expected information. You also often worry about whether the web service returns whatever it promises it will return. Working with APIs is both easy and tricky due to all the implications behind the scenes. What happens if the service goes down and sends unexpected responses? Or if your app loses internet connection? Using a proxy to intercept network calls will help us answer these questions.&lt;/p></description></item><item><title>Quick Tip: Hosting JSON Files on Github for Free</title><link>https://www.andyibanez.com/posts/quick-tip-hosting-json-files-github-for-free/</link><pubDate>Wed, 04 Nov 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/quick-tip-hosting-json-files-github-for-free/</guid><description>&lt;p>There are times in which you may want to host small JSON (or other small types of files) somewhere because your app needs them. Maybe you want to configure feature flags, or maybe you want to host IAP identifiers somewhere so as to not hardcode them in your app. This last case is something I did recently.&lt;/p>
&lt;p>The immediate thought will be get a cheap server somewhere - after all, using something like &lt;a href="https://www.vultr.com/products/cloud-compute/#pricing">Vultr&lt;/a> you can get cheap hosting for as low as $2.50 per month. But did you know Github allows you to publish static websites, and you can piggyback that on that to store remote &amp;ldquo;config&amp;rdquo; about your apps?&lt;/p></description></item><item><title>Parsing Tricky JSON With Codable in Swift</title><link>https://www.andyibanez.com/posts/parsing-tricky-json-codable-swift/</link><pubDate>Wed, 28 Oct 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/parsing-tricky-json-codable-swift/</guid><description>&lt;p>If you have been writing Swift in the past couple of years, you have probably been using &lt;a href="https://developer.apple.com/documentation/swift/codable">&lt;code>Codable&lt;/code>&lt;/a> (which is really just the composition of &lt;a href="https://developer.apple.com/documentation/swift/decodable">&lt;code>Decodable&lt;/code>&lt;/a> and &lt;a href="https://developer.apple.com/documentation/swift/encodable">&lt;code>Encodable&lt;/code>&lt;/a> in the same protocol).&lt;/p>
&lt;p>If you have been writing iOS apps for longer, you likely know about &lt;a href="https://developer.apple.com/documentation/foundation/jsonserialization">&lt;code>JSONSerialization&lt;/code>&lt;/a> as well, which is the backbone of &lt;code>Codable&lt;/code> and it allows you to do more manual work when parsing JSON, seemingly giving you more control.&lt;/p>
&lt;p>If you know &lt;code>JSONSerialization&lt;/code>, you have probably found times in which Codable seemingly doesn&amp;rsquo;t give you the flexibility you need, and you may have been tempted to drop &lt;code>Codable&lt;/code> in favor of &lt;code>JSONSerialization&lt;/code> when parsing very specific or even corrupted JSON.&lt;/p></description></item><item><title>Formatting Notes and Gotchas</title><link>https://www.andyibanez.com/posts/formatting-notes-and-gotchas/</link><pubDate>Wed, 30 Sep 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/formatting-notes-and-gotchas/</guid><description>&lt;p>A year ago, we talked about &lt;a href="https://www.andyibanez.com/posts/nsformatter/">using NSFormatter for formatting data in a human readable format&lt;/a>. WWDC2020 brings some updates and changes to the &lt;code>NSFormatter&lt;/code> APIs that we need to be aware of. This article will complement the NSFormatter article from last year with best practices and things to look out for.&lt;/p>
&lt;h1 id="improvements-for-combinations-of-languages-and-regions">Improvements for Combinations of Languages and Regions.&lt;/h1>
&lt;p>&lt;code>NSFormatter&lt;/code> always does its best to format the data according to the user&amp;rsquo;s language and region where relevant. Apple is improving the combinations for this because it&amp;rsquo;s highly common for people to set their phones in a language that is not commonly used in a given region. This is pretty exciting for me, because I live in Bolivia where people speak Spanish, but I have used my devices in English for as long as I can remember.&lt;/p></description></item><item><title>A Short Guide to Localization on Apple Platforms</title><link>https://www.andyibanez.com/posts/a-short-guide-localization-apple-platforms/</link><pubDate>Wed, 23 Sep 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/a-short-guide-localization-apple-platforms/</guid><description>&lt;p>Translating our apps in different languages helps us reach wider audiences of different cultures. This reach can increase our app usage considerably and offer more monetization properties.&lt;/p>
&lt;p>In this short article we will mention the features Apples gives us to translate our apps to different languages, namely &lt;code>NSLocalizedString&lt;/code> and and &lt;code>stringsdict&lt;/code> files. You will also understand when you will want to use each, as they have different use cases and an app that takes localization seriously will use both.&lt;/p></description></item><item><title>WWDC2020: What's new in CryptoKit</title><link>https://www.andyibanez.com/posts/wwdc2020-whats-new-cryptokit/</link><pubDate>Mon, 14 Sep 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/wwdc2020-whats-new-cryptokit/</guid><description>&lt;p>CryptoKit, introduced in WWDC2019, allows us to &lt;a href="https://www.andyibanez.com/posts/common-cryptographic-operations-with-cryptokit/">perform cryptographic operations very easily&lt;/a>.&lt;/p>
&lt;p>While CryptoKit still doesn&amp;rsquo;t offer many algorithms and functionality, it&amp;rsquo;s still growing, and this year CryptoKit and do more.&lt;/p>
&lt;h1 id="hkdf">HKDF&lt;/h1>
&lt;p>Key derivation functions have been available from day one, but it wasn&amp;rsquo;t possible to derive keys independently. It was only possible to do so if you were using elliptic curve key agreement protocols.&lt;/p>
&lt;p>To do this, there is a new &lt;code>HKDF&lt;/code> object with static methods. One such method is &lt;code>deriveKey&lt;/code> with multiple overloads:&lt;/p></description></item><item><title>Logging Messages With the Unified Logging System on Apple Platforms</title><link>https://www.andyibanez.com/posts/logging-messages-unified-logging-system-apple-platforms/</link><pubDate>Wed, 09 Sep 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/logging-messages-unified-logging-system-apple-platforms/</guid><description>&lt;p>Last time we &lt;a href="https://www.andyibanez.com/posts/introduction-apples-unified-logging-system-ios14-swift/">talked about the basics of the Unified Logging System&lt;/a>, we set the basic concepts and code we need to write logs, along with the different logging levels, and more.&lt;/p>
&lt;p>In this article we will talk about actually logging messages, how the framework is &amp;ldquo;smart enough&amp;rdquo; to strip out sensitive user info by default, and how we can control what gets stripped.&lt;/p>
&lt;h1 id="logging-messages">Logging Messages&lt;/h1>
&lt;p>The framework supports interpolated strings right out of the box when you are using the new system in Swift.&lt;/p></description></item><item><title>Using ASWebAuthenticationSession with SwiftUI</title><link>https://www.andyibanez.com/posts/using-aswebauthenticationaession-swiftui/</link><pubDate>Wed, 02 Sep 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/using-aswebauthenticationaession-swiftui/</guid><description>&lt;p>Working with REST APIs you have no control over can be a little monotonous. This is especially for OAuth 2.0 API that need you to do a little bit of setup, get your API keys with the service provider, and then you need to do the setup on your app&amp;rsquo;s size: Configure your URL scheme, deal with that URL Scheme, and write code that does something when your app gets called with that URL.&lt;/p></description></item><item><title>Introduction to Apple's Unified Logging System on iOS 14 in Swift</title><link>https://www.andyibanez.com/posts/introduction-apples-unified-logging-system-ios14-swift/</link><pubDate>Wed, 26 Aug 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/introduction-apples-unified-logging-system-ios14-swift/</guid><description>&lt;p>It is no surprise that software tend to write logs to a local file as they execute. As events, errors, or exceptional situations occur, a lot of software takes note of them using a local logging solution. This is done because these practices can allow us to troubleshoot problems for our users, find bugs, and in general understand the behavior of our software in untested or lesser tested scenarios.&lt;/p>
&lt;p>When comes to iOS and other Apple platforms, there have always been third party dependencies that allow you to do this. A lot of developers roll their own solution and write events in plain text files. It wasn&amp;rsquo;t until iOS 8 and macOS 10.10 that Apple provided us with a unified logging system that is easy to use and is very performant - &lt;a href="https://developer.apple.com/documentation/os/oslog">&lt;code>OSLog&lt;/code>&lt;/a>.&lt;/p></description></item><item><title>A File Download Queue in Combine for Swift</title><link>https://www.andyibanez.com/posts/file-download-queue-combine/</link><pubDate>Wed, 12 Aug 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/file-download-queue-combine/</guid><description>&lt;p>Combine allows us to create pipelines for a lot of tasks. Thanks to the fact it can do work concurrently without leveraging callbacks, it is very easy to build things that would otherwise be very complex.&lt;/p>
&lt;p>In this short article, we will build a file download queue that downloads images sequentially. You can use this as the base for more complex queues.&lt;/p>
&lt;p>The queue will download an array of images sequentially. If you wanted to support concurrent queues, it would probably be wise to instantiate this publisher as many times as necessary.&lt;/p></description></item><item><title>Error Protocol Specializations in Swift</title><link>https://www.andyibanez.com/posts/error-protocol-specializations-swift/</link><pubDate>Thu, 18 Jun 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/error-protocol-specializations-swift/</guid><description>&lt;p>Earlier this week I was scrolling through my Twitter feed as usual and I found &lt;a href="https://twitter.com/harlanhaskins/status/1270399151730118656?s=20">this tweet&lt;/a> that made me realize I may have been handling errors incorrectly in Swift all my life. This prompted me to research a bit more about error handling in Swift, and it turns out there&amp;rsquo;s many specialized &lt;code>Error&lt;/code> protocols you can conform to, and you should probably be using them over the default &lt;code>Error&lt;/code> provided by the language. All these specializations conform to &lt;code>Error&lt;/code> themselves. In this article, we will explore a few specializations we can use when dealing with errors in Swift.&lt;/p></description></item><item><title>Using the iOS Keychain with Biometrics</title><link>https://www.andyibanez.com/posts/ios-keychain-touch-id-face-id/</link><pubDate>Wed, 03 Jun 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/ios-keychain-touch-id-face-id/</guid><description>&lt;p>If you have been &lt;a href="https://www.andyibanez.com/posts/using-ios-keychain-swift/">using the keychain on your iOS apps&lt;/a> you may want to start using Face ID/Touch ID to let your user access your app and their data. This is a common use case but it&amp;rsquo;s very easy to do incorrectly.&lt;/p>
&lt;p>Apple introduced Touch ID all the way back in 2013, and ever since then, every iOS device has come with some sort of biometric authentication method, be it Touch ID or Face ID. This has allowed developers to implement convenient unlocking into their apps to access sensitive data without having to ask for the passcode. If your app &amp;ldquo;locks&amp;rdquo; access in any way your users are probably expecting to &amp;ldquo;unlock&amp;rdquo; with their finger or Face ID, so it is your responsibility to implement in a way that is secure and can&amp;rsquo;t be vulnered.&lt;/p></description></item><item><title>Using the iOS Keychain in Swift</title><link>https://www.andyibanez.com/posts/using-ios-keychain-swift/</link><pubDate>Wed, 27 May 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/using-ios-keychain-swift/</guid><description>&lt;p>&lt;em>This article is an entirely rewritten version of an old tutorial I wrote years ago titled &amp;ldquo;Using the iOS Keychain&amp;rdquo;. Originally written in Objective-C, the old version has been archived but it is accessible &lt;a href="https://www.andyibanez.com/old-content/">here&lt;/a>.&lt;/em>&lt;/p>
&lt;p>The Keychain is the place where you would store sensitive data. As secure as iOS currently is, the keychain is the right place to store passwords, authentication tokens, and other sensitive data. You should not store this kind of data in &lt;code>UserDefaults&lt;/code>, even if iOS has made it harder to access that data for normal users in the latest versions.&lt;/p></description></item><item><title>Writing Content Blockers for iOS</title><link>https://www.andyibanez.com/posts/content-blockers-in-ios/</link><pubDate>Wed, 20 May 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/content-blockers-in-ios/</guid><description>&lt;p>A few years ago, Apple introduced the Content Blocking APIs to Safari. Using these APIs, developers are able to write extensions that allow Safari to block content users do not want to see.&lt;/p>
&lt;p>Most commonly used for ads, content blockers are not really &lt;em>ad blockers&lt;/em>. While they can, and commonly do, block ads, developers can write content blockers for all kind of content, including profanity, or other questionable content.&lt;/p>
&lt;h1 id="content-blocking-vs-ad-blocking">Content Blocking VS Ad Blocking.&lt;/h1>
&lt;p>Content Blockers are actually very limited in terms of what they can do. We cannot really achieve the level of functionality especialized extensions such as AdBlock Plus have to offer. Apple&amp;rsquo; implementation has two main focuses in mind:&lt;/p></description></item><item><title>Dependency Injection with Storyboards on Apple Platforms</title><link>https://www.andyibanez.com/posts/dependency-injection-storyboards/</link><pubDate>Wed, 13 May 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/dependency-injection-storyboards/</guid><description>&lt;p>Every iOS developer has written a line of code like this one at least once:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">class&lt;/span> &lt;span style="color:#f9e2af">DollInfoViewController&lt;/span>: UIViewController {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">var&lt;/span> &lt;span style="color:#f5e0dc">dollModel&lt;/span>: Doll?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">override&lt;/span> &lt;span style="color:#f38ba8">func&lt;/span> &lt;span style="color:#89b4fa">viewDidLoad&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">super&lt;/span>.viewDidLoad()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// Do any additional setup after loading the view.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or in the worst case, you may have seen code like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">var&lt;/span> &lt;span style="color:#f5e0dc">dollModel&lt;/span>: Doll!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, when you want to create a view controller of that type you&amp;rsquo;d do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// First we need to check if we can actually instantiate the view controller.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">guard&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#f5e0dc">dollInfoVc&lt;/span> = storyboard?.instantiateViewController(withIdentifier: &lt;span style="color:#a6e3a1">&amp;#34;DollInfo&amp;#34;&lt;/span>) &lt;span style="color:#cba6f7">as&lt;/span>? DollInfoViewController &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">fatalError&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Unable to load view controller.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Then we pass in the data we want to work with. &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dollInfoVc.dollModel = doll
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Code like this is &lt;em>very&lt;/em> error prone. The worst part is that up untul iOS 13, it was pretty much necessary to pass data around from view controller to view controller. It&amp;rsquo;s not possible to do this in any different way in different iOS versions.&lt;/p></description></item><item><title>Finding Related Words with NLEmbedding</title><link>https://www.andyibanez.com/posts/using-nlembeddings/</link><pubDate>Wed, 04 Mar 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/using-nlembeddings/</guid><description>&lt;p>There may be cases in which you need to find related words to others. With the &lt;a href="https://developer.apple.com/documentation/naturallanguage/nlembedding">&lt;code>NSLEmbedding&lt;/code>&lt;/a> class, you can find related strings based on the proximity of their vectors.&lt;/p>
&lt;h1 id="using-nlembedding">Using NLEmbedding&lt;/h1>
&lt;p>Using &lt;code>NLEmbedding&lt;/code> is very straight forward. A simple task is to get an array of related words, which come as an array of &lt;code>(String, NLDistance)&lt;/code> back.&lt;/p>
&lt;p>The distance between words tells you how &amp;ldquo;related&amp;rdquo; they are&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#f5e0dc">embedding&lt;/span> = NLEmbedding.wordEmbedding(&lt;span style="color:#cba6f7">for&lt;/span>: .english)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#f5e0dc">foundWords&lt;/span> = embedding!.neighbors(&lt;span style="color:#cba6f7">for&lt;/span>: &lt;span style="color:#a6e3a1">&amp;#34;family&amp;#34;&lt;/span>, maximumCount: &lt;span style="color:#fab387">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">print&lt;/span>(foundWords)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, it will print:&lt;/p></description></item><item><title>Analyzing Natural Language Text with NLTagger</title><link>https://www.andyibanez.com/posts/analyzing-text-nltagger/</link><pubDate>Wed, 26 Feb 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/analyzing-text-nltagger/</guid><description>&lt;p>In the past few weeks, we have explored how we can &lt;a href="https://www.andyibanez.com/posts/tokenizing-nltokenizer/">tokenize natural language text&lt;/a> and how to &lt;a href="https://www.andyibanez.com/posts/recognizing-language-nllanguagerecognizer/">recognize the language a natural language text is written in&lt;/a>. This week we will continue exploring more natural language APIs provided by the &lt;code>NaturalLanguage&lt;/code> framework. We will learn about the &lt;a href="https://developer.apple.com/documentation/naturallanguage/nltagger">NLTagger&lt;/a> class, which allows us to to analyze natural language text to find parts of speech, lexical classes, lemma, scripts, and more. This API, introduced in iOS 12, implements machine learning to work, and just like the other &lt;code>NaturalLanguage&lt;/code> classes, is very easy to use.&lt;/p></description></item><item><title>Recognizing the language in a Natural Language Text with NLanguageRecognizer</title><link>https://www.andyibanez.com/posts/recognizing-language-nllanguagerecognizer/</link><pubDate>Wed, 19 Feb 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/recognizing-language-nllanguagerecognizer/</guid><description>&lt;p>Continuing my trend of writing about language processing, today I want to discuss about identifying the language of a body of text. This is an interesting task we can do thanks, once again, to Apple&amp;rsquo;s investment in APIs linked to machine learning.&lt;/p>
&lt;p>Today we will explore the &lt;a href="https://developer.apple.com/documentation/naturallanguage/nllanguagerecognizer">&lt;code>NLLanguageRecognizer&lt;/code>&lt;/a> object. Introduced in iOS 12, this class can do a lot of language recognizing, from detecting the &amp;ldquo;dominant language&amp;rdquo; of a string, to all the possible languages.&lt;/p></description></item><item><title>Tokenizing Natural Language into Semantic Units in iOS</title><link>https://www.andyibanez.com/posts/tokenizing-nltokenizer/</link><pubDate>Wed, 12 Feb 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/tokenizing-nltokenizer/</guid><description>&lt;p>Working with Natural Language is possible thanks to machine learning. Starting on iOS 12, Apple has provided many APIs just for this task. In this article we will explore how to use &lt;a href="https://developer.apple.com/documentation/naturallanguage/nltokenizer">&lt;code>NLTokenizer&lt;/code>&lt;/a> to separate natural language text into its proper units.&lt;/p>
&lt;h1 id="introduction-to-natural-language-tokenizing">Introduction to Natural Language Tokenizing&lt;/h1>
&lt;p>If you are not familiar with the inner workings of Natural Language processing, tokenizing simply means that we separate a string and analyze it to find its semantic units. If you are writing a program that processes text, you may be tempted to split the string using a separator. For example, if you wanted to get all the words in a natural sentence string in an array, you would write something like this:&lt;/p></description></item><item><title>Matching Natural Language Text for Predefined Data Patterns on Apple's Devices</title><link>https://www.andyibanez.com/posts/matching-nl-nsdatadetector/</link><pubDate>Wed, 05 Feb 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/matching-nl-nsdatadetector/</guid><description>&lt;p>iOS has a lot of APIs that deal with natural language detection. One such class is &lt;a href="https://developer.apple.com/documentation/foundation/nsdatadetector">&lt;code>NSDataDetector&lt;/code>&lt;/a>. This class allows you to match different kinds of data in text, including dates, time, links, and more. This class, actually introduced a very long time ago (in the iOS 4.0 days!) makes it very easy to find this kind of data in strings. In this article we will explore how to use this very old class - whose documentation is Objective-C only at this time - in Swift, and how to do common tasks with it.&lt;/p></description></item><item><title>Generating Feedback Haptics with UINotificationFeedbackGenerator</title><link>https://www.andyibanez.com/posts/haptics-with-uinotificationfeedbackgenerator/</link><pubDate>Wed, 22 Jan 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/haptics-with-uinotificationfeedbackgenerator/</guid><description>&lt;p>A few weeks ago, we talked about how we could &lt;a href="https://www.andyibanez.com/posts/playing-custom-haptics-on-ios/">play custom haptic feedbacks with CHHapticEngine&lt;/a>. We saw how powerful and flexible that class is, letting us create different haptics for any context.&lt;/p>
&lt;p>Sometimes though, you want to play simpler haptics to let the user know that something has occurred. The &lt;code>CHHapticEngine&lt;/code> class can be overkill, and finding the right parameters to have interaction feedback can be very time consuming.&lt;/p>
&lt;p>There is a subclass of &lt;code>UIFeedbackGenerator&lt;/code> that actually exists since way before we got all the power &lt;code>CHHapticEngine&lt;/code>: &lt;code>UINotificationFeedbackGenerator&lt;/code> contains pre-made haptics to let users know when an action finished successfully, with an error, or a &amp;ldquo;warning&amp;rdquo; in the context of your app.&lt;/p></description></item><item><title>CryptoKit and the Secure Enclave</title><link>https://www.andyibanez.com/posts/cryptokit-secure-enclave/</link><pubDate>Wed, 15 Jan 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/cryptokit-secure-enclave/</guid><description>&lt;p>CryptoKit and the Secure Enclave&lt;/p>
&lt;p>Apple&amp;rsquo;s &lt;a href="https://www.andyibanez.com/posts/common-cryptographic-operations-with-cryptokit/">CryptoKit&lt;/a> introduced this year is full of amazing features. Not only does it offer very easy to use cryptography, but it also offers an interface to a security feature that Apple introduced less than a decade ago: The Secure Enclave.&lt;/p>
&lt;p>The Secure Enclave is a hardware feature for helping the system work with cryptographically secure data. In this article, we will build upon our previous CryptoKit knowledge (see the article linked above), and we will also learn what the Secure Enclave is all about.&lt;/p></description></item><item><title>Modern Backgrounds Tasks in iOS 13</title><link>https://www.andyibanez.com/posts/modern-background-tasks-ios13/</link><pubDate>Wed, 25 Dec 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/modern-background-tasks-ios13/</guid><description>&lt;p>In the &lt;a href="https://www.andyibanez.com/posts/background-execution-in-ios/">article from last week&lt;/a>, we explored the basic background execution APIs introduced since iOS 7. We explored how we could request additional time for a task to complete after entering the background, how we could defer downloads with URLSession, and how we could use silent push notifications to trigger background tasks.&lt;/p>
&lt;p>The story with background tasks does not end there. iOS 13 introduced more APIs to do better background tasks, and that allow you to do things that weren&amp;rsquo;t possible before. Apple gave us the new shiny &lt;a href="https://developer.apple.com/documentation/backgroundtasks">&lt;code>BackgroundTasks&lt;/code>&lt;/a> framework on WWDC2019. This framework gives developers more flexibility and less constraints to execute code while their apps are in the background. Not only that, but the old Background App Refresh APIs have now been deprecated in favor of a new, modern way to perform them for your app. This changes unifies with the new Background Processing tasks which lets you do more work in the background, while a device is charging, and more.&lt;/p></description></item><item><title>Formatting Relative Dates With RelativeDateTimeFormatter</title><link>https://www.andyibanez.com/posts/formatting-relative-dates-relativedatetimeformatter/</link><pubDate>Wed, 11 Dec 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/formatting-relative-dates-relativedatetimeformatter/</guid><description>&lt;p>Formatting Relative Dates With RelativeDateTimeFormatter&lt;/p>
&lt;p>A few weeks ago we talked about &lt;a href="https://www.andyibanez.com/posts/nsformatter/">formatting content with NSFormatter&lt;/a>, an abstract class from which multiple formatting classes inherit from to allow you to format different kinds of data in a human-readable form. &lt;code>NSFormatter&lt;/code> is not only a class you can inherit from yourself, but as iOS evolves, more formatters will be added to its family. This week, we will explore a new member of this family introduced in iOS 13: &lt;code>RelativeDateTimeFormatter&lt;/code>.&lt;/p></description></item><item><title>UserDefaults and Property Wrappers</title><link>https://www.andyibanez.com/posts/nsuserdefaults-property-wrappers/</link><pubDate>Wed, 04 Dec 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/nsuserdefaults-property-wrappers/</guid><description>&lt;hr>
**Important Note**
&lt;p>Soon after I published this article, Christian Tietze wrote a fair criticism of this idea &lt;a href="https://christiantietze.de/posts/2019/12/userdefaults-property-wrappers/">here&lt;/a>.&lt;/p>
&lt;p>Once you understand how property wrappers work, you can use this article to apply it to user defaults. The main idea is that property wrappers allow you to store your values differently and even externally. That said, you may or may not want to implement this in a real app. I recommend you read this article first, and then go back to Christian&amp;rsquo;s to see more downsides of this idea other than the ones I mentioned below.&lt;/p></description></item><item><title>Intercepting Network Traffic with mitmproxy</title><link>https://www.andyibanez.com/posts/intercepting-network-mitmproxy/</link><pubDate>Wed, 20 Nov 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/intercepting-network-mitmproxy/</guid><description>&lt;p>If you have been programming mobile apps for a while, you must have used a web based API - JSON based or otherwise - and you have had to deal with bugs related to your requests and responses to a web service. You have likely asked yourself why some parsing code is not working as expected, or why a request seems to have an invalid format. Intercepting your own network calls with a proxy can help you find the answer to these questions.&lt;/p></description></item><item><title>When CryptoKit is not Enough</title><link>https://www.andyibanez.com/posts/cryptokit-not-enough/</link><pubDate>Wed, 06 Nov 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/cryptokit-not-enough/</guid><description>&lt;p>&lt;em>This article is a continuation to my &lt;a href="https://www.andyibanez.com/posts/common-cryptographic-operations-with-cryptokit/%5D">Common Cryptographic Operations with CryptoKit&lt;/a> article. If you want to learn how to use CryptoKit, read that one instead, and come to this one when you need a feature not offered by it.&lt;/em>&lt;/p>
&lt;p>As I have been playing with the amazing CryptoKit framework in the past few weeks, I have discovered a few more things that CryptoKit currently doesn&amp;rsquo;t do. This is not generally a bad thing, and I &lt;em>think&lt;/em> these limitations are related to what seem to be the goal of the framework:&lt;/p></description></item><item><title>Introduction to Patterns and Pattern Matching in Swift.</title><link>https://www.andyibanez.com/posts/pattern-matching/</link><pubDate>Wed, 30 Oct 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/pattern-matching/</guid><description>&lt;p>Swift is a beautiful language, but it hides some powerful features from developers who come from more &amp;ldquo;old-style&amp;rdquo; programming languages such as C++ and Java. One such feature is Pattern Matching, and it allows you to write some cleaner code when dealing with some operations.&lt;/p>
&lt;p>For example, consider casting. Casting is a feature in the vast majority of statically-typed languages. Casting is considered to be an ugly operation by some, because when you need to cast, it&amp;rsquo;s usually because the language has a flaw that prevents it from telling you about the right data type underneath. This is specially true when you add in Object-Oriented Programming and classes are marked to return a super type instead of a specific subtype. With pattern matching, you can more cleanly check for datatypes without having to worry about crashes or weird behavior.&lt;/p></description></item><item><title>Understanding and Implementing NSNotificationCenter on Apple's Platforms</title><link>https://www.andyibanez.com/posts/nsnotificationcenter/</link><pubDate>Wed, 23 Oct 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/nsnotificationcenter/</guid><description>&lt;p>Sometimes when you are writing an app, you need to be notified of events occurring somewhere else in the system - either in your own app, or in the operating system - and react to them accordingly. For example, you may be an app like Snapchat and you want to know when a screenshot has been taken. This is a system notification that you can &amp;ldquo;listen&amp;rdquo; to in order to react. If you have an app like a photo gallery, you may need to know when the user adds a new photo so you can update all relevant UI and make other necessary updates.&lt;/p></description></item><item><title>Filtering Arrays with Predicates</title><link>https://www.andyibanez.com/posts/filtering-arrays-nspredicate/</link><pubDate>Wed, 16 Oct 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/filtering-arrays-nspredicate/</guid><description>&lt;p>Whether you have been programming for a while or are new at it, chances are you have had the need to search for results in an array. And while Apple&amp;rsquo;s SDKs for iOS, macOS, iPadOS, and watchOS all use Foundation and have a set of handy tools to make that task easier, there is one particular API that is very powerful but doesn&amp;rsquo;t get much use unless you pair with other frameworks such as Core Data: NSPredicate.&lt;/p></description></item><item><title>Common Cryptographic Operations With CryptoKit</title><link>https://www.andyibanez.com/posts/common-cryptographic-operations-with-cryptokit/</link><pubDate>Wed, 09 Oct 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/common-cryptographic-operations-with-cryptokit/</guid><description>&lt;p>Apple has always taken security very seriously, so it&amp;rsquo;s expected that they would provide developers with the same tools they have to help developers implement the same security measures in their apps. This year, Apple introduced &lt;code>CryptoKit&lt;/code>.&lt;/p>
&lt;p>Apple providing new cryptography tools is nothing new. They have provided the &lt;code>Security&lt;/code> framework for a &lt;em>very&lt;/em> long time, and a few years later they introduced &lt;code>CommonCrypto&lt;/code>. The problem with these frameworks is that they can be very low level, being written in C, and it can be intimidating for new developers to adopt them in their project. &lt;code>CryptoKit&lt;/code> abstracts a lot of the details and it provides easier interfaces for common operations such as hashing, encrypting, and even signing.&lt;/p></description></item><item><title>Playing Custom Haptics on iOS</title><link>https://www.andyibanez.com/posts/playing-custom-haptics-on-ios/</link><pubDate>Wed, 02 Oct 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/playing-custom-haptics-on-ios/</guid><description>&lt;p>Vibration and physical feedback has become an important feature of Apple&amp;rsquo;s operating systems. Starting with the Apple Watch, Apple replaced the traditional vibration feedback with haptic feedback hardware, which allowed them to have more control over how vibrations and physical feedback work.&lt;/p>
&lt;p>First being introduced in the Apple Watch, Haptic Feedback has been a core part of the Apple ecosystem experience since. Just think about it, wouldn&amp;rsquo;t it be weird if you force-touched the screen to do something, and there was no physical response from the device? Think of the old Peek-and-Pop. If you updated to iOS 13 and got context menus, you may feel they feel great to do in iOS (because they have a haptic engine), but on iPad they feel lacking because the device doesn&amp;rsquo;t vibrate when triggering them.&lt;/p></description></item><item><title>Formatting Content with NSFormatter</title><link>https://www.andyibanez.com/posts/nsformatter/</link><pubDate>Wed, 25 Sep 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/nsformatter/</guid><description>&lt;p>Very often, we need to deal with data in a &amp;ldquo;raw&amp;rdquo; format that, if displayed directly to the user, it makes little sense to them. This kind of data includes a date timestamp, the number of bytes in a big file, or numbers with no rounding a bunch of decimals. There is a lot of data like this, and we need to be able to format it and show it to the user.&lt;/p></description></item><item><title>Understanding the Result Type in Swift</title><link>https://www.andyibanez.com/posts/swift-result-type/</link><pubDate>Wed, 11 Sep 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/swift-result-type/</guid><description>&lt;p>Error handling when expecting a result out of an operation is a very common thing to do. For this reason, various high-level programming languages have introduced a &lt;code>Result&lt;/code> type into their libraries, on top of their existing error-handling features. This feature was implemented in Swift 5.&lt;/p>
&lt;p>A &lt;code>Result&lt;/code> wraps a success or a failure. It is essentially an &lt;code>enum&lt;/code> with two possible cases: &lt;code>.success&lt;/code> and &lt;code>.failure&lt;/code>. The &lt;code>.success&lt;/code> case wraps the correct result of an operation, whereas a &lt;code>.failure&lt;/code> wraps an &lt;code>Error&lt;/code>. Its implementation uses generics, so you always know what you are going to get back.&lt;/p></description></item><item><title>Building URLs With NSURLComponents</title><link>https://www.andyibanez.com/posts/building-urls-with-nsurlcomponents/</link><pubDate>Wed, 04 Sep 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/building-urls-with-nsurlcomponents/</guid><description>&lt;p>If you have been programming for Apple platforms for a while, chances are you have seen (or maybe even wrote yourself) a line of code that looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#f5e0dc">url&lt;/span> = URL(string: &lt;span style="color:#a6e3a1">&amp;#34;https://www.google.com/search?hl=en&amp;amp;q=pullip&amp;#34;&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Whether you wrote it yourself or someone else did it, one thing is clear: This is not a safe way to build URLs. Can you know, for sure, that your URL is actually valid? Intuitively, all of us can see a URL and see if it&amp;rsquo;s valid, but there is a &lt;a href="http://www.faqs.org/rfcs/rfc1738.html">whole lot of governing&lt;/a> in the URL format that at some point we may find funny URLs that look valid and aren&amp;rsquo;t, or the other way around; they look invalid, but aren&amp;rsquo;t.&lt;/p></description></item><item><title>Caching Content With NSCache</title><link>https://www.andyibanez.com/posts/caching-content-with-nscache/</link><pubDate>Wed, 28 Aug 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/caching-content-with-nscache/</guid><description>&lt;p>When we are working with apps on iOS, iPadOS, macOS, watchOS, or TVOS, it&amp;rsquo;s possible that at some point we will have to store and retrieve a lot of temporary data throughout the lifecycle of our software. Depending on our needs, we may need to cache data on disk and manually manage it ourselves, or we may only need it to cache it in memory. In the case of the latter, Apple offers &lt;code>NSCache&lt;/code>, a mutable collection that lets us cache files in memory using key-value pairs.&lt;/p></description></item><item><title>Exploring the NSOperation APIs for Apple's Platforms</title><link>https://www.andyibanez.com/posts/exploring-the-nsoperation-apis/</link><pubDate>Wed, 21 Aug 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/exploring-the-nsoperation-apis/</guid><description>&lt;p>&lt;em>The original title for this article was posted on my old website in 2012 and it was titled &amp;ldquo;Multithreading on iOS And Mac OS X Using NSOperations&amp;rdquo;. The original examples were written in Objective-C. This article has been rewritten from scratch not only to give the examples in Swift, but also to improve the quality of the old article. It has been shortened, and both language and tone have been revised.&lt;/em>&lt;/p></description></item><item><title>Fsduplicates</title><link>https://www.andyibanez.com/projects/fsduplicates/</link><pubDate>Sun, 26 Jun 2016 19:49:00 -0400</pubDate><guid>https://www.andyibanez.com/projects/fsduplicates/</guid><description>&lt;p>&lt;img src="https://www.andyibanez.com/img/fsduplicates.png" alt="fsduplicates">&lt;/p>
&lt;p>&lt;em>Discontinued project. Developed in 2016&lt;/em>&lt;/p>
&lt;p>Command line tool to detect duplicate songs in OS X/macOS based on their Audio Fingerprints.&lt;/p>
&lt;p>fsduplicates helps you find song duplicates recursively in any specific directory and output its findings in a different directory. With the generated results you can later analyse and take action on duplicate songs. The results are in plain text files, which you can analyse using any tool, like Unix standard commands, or fsduplicates’ tools.&lt;/p></description></item><item><title>Leopaster</title><link>https://www.andyibanez.com/projects/leopaster/</link><pubDate>Sat, 04 Jan 2014 22:15:00 -0400</pubDate><guid>https://www.andyibanez.com/projects/leopaster/</guid><description>&lt;p>&lt;img src="https://www.andyibanez.com/img/leopaster.png" alt="Leopaster">&lt;/p>
&lt;p>&lt;em>Discontinued project. Developed in 2015&lt;/em>&lt;/p>
&lt;p>Quick Status Bar Menu on OS X that allows you to quickly paste code on @DHowett’s ghostbin.com.&lt;/p>
&lt;p>ghostbin.com is a simple pasteboard service that allows people to paste code or any other text and to quickly share a link to them. These services allow developers to share code snippets faster to either request help with an specific piece of code, or to help others with theirs (Other uses may apply).&lt;/p></description></item></channel></rss>
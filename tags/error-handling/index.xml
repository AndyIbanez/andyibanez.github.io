<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Error Handling on Andy Ibanez</title><link>https://www.andyibanez.com/tags/error-handling/</link><description>Recent content in Error Handling on Andy Ibanez</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Thu, 18 Jun 2020 22:00:00 -0400</lastBuildDate><atom:link href="https://www.andyibanez.com/tags/error-handling/index.xml" rel="self" type="application/rss+xml"/><item><title>Error Protocol Specializations in Swift</title><link>https://www.andyibanez.com/posts/error-protocol-specializations-swift/</link><pubDate>Thu, 18 Jun 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/error-protocol-specializations-swift/</guid><description>&lt;p>Earlier this week I was scrolling through my Twitter feed as usual and I found &lt;a href="https://twitter.com/harlanhaskins/status/1270399151730118656?s=20">this tweet&lt;/a> that made me realize I may have been handling errors incorrectly in Swift all my life. This prompted me to research a bit more about error handling in Swift, and it turns out there&amp;rsquo;s many specialized &lt;code>Error&lt;/code> protocols you can conform to, and you should probably be using them over the default &lt;code>Error&lt;/code> provided by the language. All these specializations conform to &lt;code>Error&lt;/code> themselves. In this article, we will explore a few specializations we can use when dealing with errors in Swift.&lt;/p></description></item></channel></rss>
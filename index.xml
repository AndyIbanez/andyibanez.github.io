<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Andy Ibanez</title><link>https://www.andyibanez.com/</link><description>Recent content on Andy Ibanez</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sat, 06 Sep 2025 12:00:00 +0000</lastBuildDate><atom:link href="https://www.andyibanez.com/index.xml" rel="self" type="application/rss+xml"/><item><title>About Me</title><link>https://www.andyibanez.com/about/</link><pubDate>Sat, 06 Sep 2025 12:00:00 +0000</pubDate><guid>https://www.andyibanez.com/about/</guid><description>&lt;p>Â¡Hola!&lt;/p>
&lt;p>My name is Andy. I come from across the Andes, overwatched by the beautiful Illimani, and I am a Computer Systems Engineer, graduated from &lt;a href="https://www.upb.edu">Universidad Privada Boliviana&lt;/a>.&lt;/p>
&lt;p>I started programming when I was 14 years old. My career got kickstarted thanks to a website called &lt;a href="https://www.neoseeker.com">Neoseeker&lt;/a>. Neoseeker is one of the few old-style internet forums that is still around today. Neoseeker is a gaming website, and I joined the website because, well, I wanted to talk about videogames. However, little did I know that it would kickstart my programming career thanks to the fact it allows you to build and host a small HTML webpage on your profile. Thanks to the small, but active, programmer community on the website, I was able to extend my programming knowledge from simple HTML websites all the way up to native applications and backend development.&lt;/p></description></item><item><title>Ten Years and Over a 100 Articles Later - And Break Notice</title><link>https://www.andyibanez.com/posts/ten-years-and-over-100-articles-later/</link><pubDate>Wed, 13 Oct 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/ten-years-and-over-100-articles-later/</guid><description>&lt;p>This year marks 10 years since I started writing iOS apps. It also marks 10 years since I launched the first version of my blog, which was a thing hosted on Tumblr and on a completely different domain that I am not going to name here. A year after the Tumblr blog, I purchased andyibanez.com, got proper hosting, and started blogging on Wordpress with whatever little money I could make during my college days.&lt;/p></description></item><item><title>The Mysterious CodableWithConfiguration Protocol</title><link>https://www.andyibanez.com/posts/the-mysterious-codablewithconfiguration-protocol/</link><pubDate>Wed, 29 Sep 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/the-mysterious-codablewithconfiguration-protocol/</guid><description>&lt;p>The Mysterious CodableWithConfiguration Protocol&lt;/p>
&lt;p>Every year, at WWDC, Apple gives us a lot of new things to play around with. For the big new things, they prepare session videos and labs so developers can experiment with the new technologies and hopefully integrate them in their apps by the time the new OSes are out.&lt;/p>
&lt;p>The &amp;ldquo;big things&amp;rdquo; are one thing, but Apple introduces &lt;em>a bunch&lt;/em> of new APIs every year. Many (oh boy, &lt;strong>many&lt;/strong>) of them do not get any coverage at WWDC at all. Not in a session, and sometimes not even a small mention of them anywhere.&lt;/p></description></item><item><title>try! Swift World: An Overview of the Modern Concurrency Features Introduced in Swift 5.5</title><link>https://www.andyibanez.com/tsw-concurrency2021/</link><pubDate>Fri, 17 Sep 2021 00:00:00 -0400</pubDate><guid>https://www.andyibanez.com/tsw-concurrency2021/</guid><description>&lt;h1 id="workshop-description">Workshop Description&lt;/h1>
&lt;p>Swift 5.5 introduced an exciting new set of concurrency APIs. Starting with async/await, the language has received a set of features that allow us to write shorter, concise, and more obvious concurrent code. You will learn how the new concurrency APIs help us avoid &amp;ldquo;pyramids of doom&amp;rdquo; with async/await, how structured concurrency is cooperative and how to apply it in the world; how unstructured concurrency gives us more control without sacrificing code readability; how to transform callback and even delegate based code into async/await, and how actors isolate their own state to make them usable across concurrent code. We will finish this course giving a bird&amp;rsquo;s eye overview of other new concurrency features, such as global actors, the @TaskLocal property wrapper, and AsyncSequences and AsyncStreams. By the end of this workshop, you will have a solid of understanding of the new concurrency system in Swift in order to tackle concurrency problems in the real world.&lt;/p></description></item><item><title>Modern Swift Concurrency Summary, Cheatsheet, and Thanks</title><link>https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/</link><pubDate>Wed, 08 Sep 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/</guid><description>&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Group Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;li>&lt;strong>Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/strong>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>Since WWDC21, we have talked, extensively, about all the new concurrency features introduced in Swift 5.5. We covered &lt;em>a lot&lt;/em> of topics, so I decided to finish off this series writing a summary article were we cover the most important topics of each article. Links will be given to the relevant articles when necessary in case this summary is not enough.&lt;/p></description></item><item><title>Using AsyncSequence in Swift</title><link>https://www.andyibanez.com/posts/using-asyncsequence-in-swift/</link><pubDate>Wed, 01 Sep 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/using-asyncsequence-in-swift/</guid><description>&lt;ul>
&lt;li>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift Article Series&lt;/a>.*&lt;/li>
&lt;/ul>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Group Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;strong>Using AsyncSequence in Swift&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/">Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>Along the new concurrency APIs introduced in Swift at WWDC2021, we have AsyncSequence. &lt;code>AsyncSequence&lt;/code> is a collection protocol that allow us to receive data in loops and even top higher order functions - such as &lt;code>filter&lt;/code>, &lt;code>map&lt;/code> and &lt;code>reduce&lt;/code> - asynchronously, being able to &lt;code>await&lt;/code> for new data as it becomes available.&lt;/p></description></item><item><title>Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model</title><link>https://www.andyibanez.com/posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model/</link><pubDate>Wed, 18 Aug 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model/</guid><description>&lt;p>&lt;em>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift Article Series&lt;/a>.&lt;/em>&lt;/p>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Task Groups in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;strong>Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/">Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>Sharing Data Across Tasks with @TaskLocal with the new Swift Concurrency Model&lt;/p></description></item><item><title>@MainActor and Global Actors in Swift</title><link>https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/</link><pubDate>Wed, 11 Aug 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/</guid><description>&lt;p>&lt;em>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift Article Series&lt;/a>.&lt;/em>&lt;/p>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Task Groups in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;strong>@MainActor and Global Actors in Swift&lt;/strong>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/">Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>We have recently talked about &lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">actors&lt;/a>, what they are, and how to use them. If you remember, an actor controls access to its properties, so a member doesn&amp;rsquo;t get written from different processes at the same time, avoiding corrupted data.&lt;/p></description></item><item><title>Understanding Actors in the New Concurrency Model in Swift</title><link>https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/</link><pubDate>Wed, 04 Aug 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/</guid><description>&lt;p>&lt;em>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift Article Series&lt;/a>.&lt;/em>&lt;/p>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Task Groups in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;strong>Understanding Actors in the New Concurrency Model in Swift&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/">Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>When we are working with concurrency, the most common problem developers face are data races. Whether it is a task updating a value at the same time another task is reading it or two tasks writing a value so that it it has an invalid value, data races are probably the main pain point of concurrency. Data races are very easy create, and hard to debug. There are entire books dedicated to the problem of data races and established patterns to avoid them.&lt;/p></description></item><item><title>Unstructured Concurrency With Detached Tasks in Swift</title><link>https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/</link><pubDate>Wed, 28 Jul 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/</guid><description>&lt;p>&lt;em>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift Article Series&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;em>This article was originally written creating examples using Xcode 13 beta 1. The article, code samples, and provided sample project have been updated for Xcode 13 beta 3.&lt;/em>&lt;/p>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Task Groups in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;strong>Unstructured Concurrency With Detached Tasks in Swift&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/">Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;em>Understanding async tasks is a requirement to read this article. If you don&amp;rsquo;t understand async tasks, you can read the &lt;a href="">Introduction to Unstructured Concurrency in Swift&lt;/a> article from this Article Series&lt;/em>&lt;/p></description></item><item><title>Introduction to Unstructured Concurrency in Swift</title><link>https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/</link><pubDate>Wed, 14 Jul 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/</guid><description>&lt;p>&lt;em>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift Article Series&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;em>This article was originally written creating examples using Xcode 13 beta 1. The article, code samples, and provided sample project have been updated for Xcode 13 beta 3.&lt;/em>&lt;/p>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Task Groups in Swift&lt;/a>&lt;/li>
&lt;li>&lt;strong>Introduction to Unstructured Concurrency in Swift&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/">Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;em>Understanding Structured Concurrency in Swift is a pre-requisite to read this article. If you aren&amp;rsquo;t familiar with that concept, feel free to read the &lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Beginning Concurrency in Swift: Structured Concurrency and async-let&lt;/a> and &lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Group Tasks in Swift&lt;/a> articles of this series.&lt;/em>&lt;/p></description></item><item><title>Structured Concurrency With Task Groups in Swift</title><link>https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/</link><pubDate>Wed, 07 Jul 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/</guid><description>&lt;p>&lt;em>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift Article Series&lt;/a>.&lt;/em>&lt;/p>
&lt;p>&lt;em>This article was originally written creating examples using Xcode 13 beta 1. The article, code samples, and provided sample project have been updated for Xcode 13 beta 3.&lt;/em>&lt;/p>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;strong>Structured Concurrency With Task Groups in Swift&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;em>Understanding Structured Concurrency and &lt;code>async let&lt;/code> is a pre-requisite to read this article. If you aren&amp;rsquo;t familiar with that concept, feel free to read the third part of this article series: &lt;a href="">Beginning Concurrency in Swift: Structured Concurrency and async-let&lt;/a>.&lt;/em>&lt;/p></description></item><item><title>Structured Concurrency in Swift: Using async let</title><link>https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/</link><pubDate>Wed, 30 Jun 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/</guid><description>&lt;p>&lt;em>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift&lt;/a> article series.&lt;/em>&lt;/p>
&lt;p>&lt;em>This article was originally written creating examples using Xcode 13 beta 1. The article, code samples, and provided sample project have been updated for Xcode 13 beta 3.&lt;/em>&lt;/p>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;strong>Structured Concurrency in Swift: Using async let&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Task Groups in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/">Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;em>Understanding async/await is a pre-requisite to read this article. If you aren&amp;rsquo;t familiar with that concept, feel free to read the first part of this article series: &lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>.&lt;/em>&lt;/p></description></item><item><title>Converting closure-based code into async/await in Swift</title><link>https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/</link><pubDate>Wed, 23 Jun 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/</guid><description>&lt;p>&lt;em>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift&lt;/a> article series.&lt;/em>&lt;/p>
&lt;p>&lt;em>This article was originally written creating examples using Xcode 13 beta 1. The article, code samples, and provided sample project have been updated for Xcode 13 beta 3.&lt;/em>&lt;/p>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;strong>Converting closure-based code into async/await in Swift&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Task Groups in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/">Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>&lt;em>To better benefit from this article, you should be familiar with async/await. If you aren&amp;rsquo;t, feel free to read the first part of this article series: &lt;a href="https://www.andyibanez.com/posts/understanding-async-await-in-swift/">Understanding async/await in Swift&lt;/a>.&lt;/em>&lt;/p></description></item><item><title>Understanding async/await in Swift</title><link>https://www.andyibanez.com/posts/understanding-async-await-in-swift/</link><pubDate>Wed, 16 Jun 2021 07:01:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/understanding-async-await-in-swift/</guid><description>&lt;p>&lt;em>This article is part of my &lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift&lt;/a> article series.&lt;/em>&lt;/p>
&lt;p>&lt;em>This article was originally written creating examples using Xcode 13 beta 1. The article, code samples, and provided sample project have been updated for Xcode 13 beta 3.&lt;/em>&lt;/p>
&lt;h6 id="table-of-contents">Table of Contents&lt;/h6>
&lt;ol>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/">Modern Concurrency in Swift: Introduction&lt;/a>&lt;/li>
&lt;li>&lt;strong>Understanding async/await in Swift&lt;/strong>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/converting-closure-based-code-into-async-await-in-swift/">Converting closure-based code into async/await in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-in-swift-using-async-let/">Structured Concurrency in Swift: Using async let&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/structured-concurrency-with-group-tasks-in-swift/">Structured Concurrency With Group Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/introduction-to-unstructured-concurrency-in-swift/">Introduction to Unstructured Concurrency in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/unstructured-concurrency-with-detached-tasks-in-swift/">Unstructured Concurrency With Detached Tasks in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/understanding-actors-in-the-new-concurrency-model-in-swift/">Understanding Actors in the New Concurrency Model in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/mainactor-and-global-actors-in-swift/">@MainActor and Global Actors in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="posts/sharing-data-across-tasks-tasklocal-new-swift-concurrency-model">Sharing Data Across Tasks with the @TaskLocal property wrapper in the new Swift Concurrency Model&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/using-asyncsequence-in-swift/">Using AsyncSequence in Swift&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://www.andyibanez.com/posts/modern-swift-concurrency-summary-cheatsheet-thanks/">Modern Swift Concurrency Summary, Cheatsheet, and Thanks&lt;/a>&lt;/li>
&lt;/ol>
&lt;hr>
&lt;p>Before you try to dive in with concurrency in Swift, you need to understand async/await. There&amp;rsquo;s no way around it. While async/await are not the only &lt;a href="https://www.andyibanez.com/posts/multithreading-options-on-apple-platforms/">concurrency options&lt;/a>, Apple&amp;rsquo;s SDKs are starting to make heavy use of them. There is no doubt that third-party library providers will start offering these as well.&lt;/p></description></item><item><title>Modern Concurrency in Swift: Introduction</title><link>https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/</link><pubDate>Wed, 16 Jun 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/modern-concurrency-in-swift-introduction/</guid><description>&lt;h1 id="introduction">Introduction&lt;/h1>
&lt;p>&lt;em>This article series was originally written creating examples using Xcode 13 beta 1. The articles in the series, code samples, and provided sample projects have been updated for Xcode 13 beta 3.&lt;/em>&lt;/p>
&lt;p>This is a tutorial series focused on the new async/await APIs Apple introduced in WWDC2021. I do not know how many articles it is going to have yet, but they will be posted in the upcoming weeks.&lt;/p></description></item><item><title>Strategies For Asking Users to Rate Your App</title><link>https://www.andyibanez.com/posts/strategies-asking-users-rate-your-app/</link><pubDate>Wed, 02 Jun 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/strategies-asking-users-rate-your-app/</guid><description>&lt;p>Having our apps have good reviews is generally a good thing. After all, many users look into how many stars an app has before deciding on downloading it. Apps with a general poor rating may not get many downloads (unless they are &amp;ldquo;essential&amp;rdquo; apps of any kind, such as companion app to another service).&lt;/p>
&lt;p>We all as developers have experienced that users are quick to give a one-star review when something doesn&amp;rsquo;t work right, but they are never inclined to rate 5 stars when they are satisfied with an app.&lt;/p></description></item><item><title>My WWDC 2021 Wishlist</title><link>https://www.andyibanez.com/posts/my-wwdc-2021-wishlist/</link><pubDate>Wed, 26 May 2021 07:00:07 -0400</pubDate><guid>https://www.andyibanez.com/posts/my-wwdc-2021-wishlist/</guid><description>&lt;p>WWDC is undoubtly my favorite event of the year, and it has been for the past 11 years. This week I&amp;rsquo;m taking a break from writing technical articles and I want to talk about my personal wishlist, both for features and developers tools.&lt;/p>
&lt;h2 id="writing-actual-viewcontrollers-for-the-settings-app">Writing Actual ViewControllers for the Settings App&lt;/h2>
&lt;p>The iOS Settings.app was supposed to be a place where you as a user, have a centralized place to configure all your settings for all your apps. I have always liked the idea of having this central area for settings instead of having to have a dedicated settings screen within each app.&lt;/p></description></item><item><title>Quick Tip: Notifying Users of App Updates - For Free</title><link>https://www.andyibanez.com/posts/quick-tip-notifying-users-app-updates-for-free/</link><pubDate>Wed, 19 May 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/quick-tip-notifying-users-app-updates-for-free/</guid><description>&lt;p>This may sound surprising to you, but even though we have app autoupdate on iOS now (and we have had it for a very long time), many people don&amp;rsquo;t have it on, or the system simply doesn&amp;rsquo;t prioritize app updates because users don&amp;rsquo;t prioritize it enough. In fact, in my day job, in which I maintain a user-facing banking app, the vast majority of users are not even in the latest version. The most used version is the one we released in April, and we average one release per week for bug fixes alone, and about monthly for major new features.&lt;/p></description></item><item><title>Integrating FaceID/TouchID with SwiftUI</title><link>https://www.andyibanez.com/posts/integrating-face-id-touch-id-swiftui/</link><pubDate>Wed, 12 May 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/integrating-face-id-touch-id-swiftui/</guid><description>&lt;p>As SwiftUI is still relatively new, and it is not clear yet for many people how to use MVVM on iOS, I decided to write this short article in which I explain how one would integrate Face ID/Touch ID with SwiftUI.&lt;/p>
&lt;p>Let&amp;rsquo;s remember that SwiftUI uses the MVVM design pattern over the traditional MVC, and this can be confusing for people who are migrating to the new pattern for the first time. That said, the main takeaway from this article is to understand that views get destroyed and rebuilt &lt;em>very&lt;/em> often in SwiftUI, and therefore the right place to write this kind of logic is in the &lt;code>ViewModel&lt;/code>&lt;/p></description></item><item><title>The NSDateInterval Object</title><link>https://www.andyibanez.com/posts/the-nsdateinterval-object/</link><pubDate>Wed, 05 May 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/the-nsdateinterval-object/</guid><description>&lt;p>Somehow, this shiny new object, which was actually introduced in iOS 10, flew past my radar. Today I want to take a few minutes to talk about the &lt;code>NSDateInterval&lt;/code> object. This object allows us to quickly calculate the time interval (represented as a &lt;code>NSTimeInterval&lt;/code>) between dates, it allows us to check if two dates overlap, and it allows us to check if a given date is within a certain interval.&lt;/p></description></item><item><title>Swift's print in Depth</title><link>https://www.andyibanez.com/posts/swift-print-in-depth/</link><pubDate>Wed, 28 Apr 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/swift-print-in-depth/</guid><description>&lt;p>Ah, &lt;code>print&lt;/code>. Probably the most known, the most used, the most popular debugging tool, and probably the most loved line of code of all time. You have undoubtedly used print before, if not in Swift, in other languages. The vast majority of programmers have started their software building skills with a &lt;code>print&lt;/code> or equivalent somewhere.&lt;/p>
&lt;p>We have all used &lt;code>print&lt;/code> before, but this short article is about using the function to the max - it actually has a secret or two you might not know about.&lt;/p></description></item><item><title>Raw Strings in Swift</title><link>https://www.andyibanez.com/posts/raw-strings-swift/</link><pubDate>Wed, 21 Apr 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/raw-strings-swift/</guid><description>&lt;p>We have all worked with strings before. Printing a piece of text, or displaying some information to users in a label, can all be done in strings. But regardless of how popular strings are, they actually have a lot of complex or unknown functionality that can help developers, but they struggle to see the light of day.&lt;/p>
&lt;p>In this article, we will explore a very interesting aspect of strings in Swift: Raw Strings, what they are, and how they can be helpful to your every day job.&lt;/p></description></item><item><title>JavaScriptCore and Swift</title><link>https://www.andyibanez.com/posts/javascriptcore-and-swift/</link><pubDate>Wed, 14 Apr 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/javascriptcore-and-swift/</guid><description>&lt;p>JavaScriptCore and Swift&lt;/p>
&lt;p>Regardless how you feel about JavaScript as a programming language, there is one simple fact: JavaScript is pretty ubiquitous, and its uses have expanded beyond web scripting. It has become a pretty popular language for a vast array of domains. For this reason, making languages interoperate with it is pretty important, and both Swift and Objective-C are no exception. We can work with JavaScript, not only by executing JavaScript code directly from our Swift code, but we can even expose code from Swift and Objective-C to JavaScript. That&amp;rsquo;s how important this language is, and these features open a world of possibilities.&lt;/p></description></item><item><title>Xcode New File Templates</title><link>https://www.andyibanez.com/posts/xcode-new-file-templates/</link><pubDate>Wed, 07 Apr 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/xcode-new-file-templates/</guid><description>&lt;p>As you work on projects, you may notice that there&amp;rsquo;s one thing that can be really improved: Creating new files. Every single developer has gone to the &lt;code>File &amp;gt; New File&lt;/code> screen on Xcode to create files before. Whether to create new view controllers, data models, or whatever else, it is one of the most common places you may use in your day to day life as an iOS developers.&lt;/p></description></item><item><title>Using NSMeasurement For Working with Dimensions and Units</title><link>https://www.andyibanez.com/posts/using-nsmeasurement-for-working-with-dimensions-and-units/</link><pubDate>Wed, 24 Mar 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/using-nsmeasurement-for-working-with-dimensions-and-units/</guid><description>&lt;p>Software development can be an easy thing, as it can be a very complex thing. And one of those complex things is keeping in mind all the different languages, locations, and standards users may use in their daily lives. This makes working with certain information. From different date formats to entirely different measuring system, software is challenging, especially when working with anything that requires localization. The situation is just so bad that a lot of software just make assumptions about their users environment and don&amp;rsquo;t let you change any settings.&lt;/p></description></item><item><title>Using CoreLocation With SwiftUI</title><link>https://www.andyibanez.com/posts/using-corelocation-with-swiftui/</link><pubDate>Wed, 17 Mar 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/using-corelocation-with-swiftui/</guid><description>&lt;p>SwiftUI forces us to change our way of thinking when building iOS apps. It makes us change from writing our apps in MVC to MVVM.&lt;/p>
&lt;p>In this article, we will explore how SwiftUI can be used with certain frameworks that aren&amp;rsquo;t &amp;ldquo;SwiftUI ready&amp;rdquo;. While this article uses CoreLocation as an example, keep in mind that you can use what you learn from this to integrate almost any other framework with SwiftUI, whether it is provided by Apple or not.&lt;/p></description></item><item><title>Getting to Know the Simulator Better</title><link>https://www.andyibanez.com/posts/getting-to-know-the-simulator-better/</link><pubDate>Wed, 10 Mar 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/getting-to-know-the-simulator-better/</guid><description>&lt;p>Every iOS developer has used the simulator. Alongside Xcode, it&amp;rsquo;s probably one of the most used tool by us all. We use the simulator to test our iOS, iPadOS, and watchOS apps without having to run them in an iOS device.&lt;/p>
&lt;p>But other than helping us test our apps, the simulator actually has many nice features that can help make our job a little bit easier. With the use of these features we can avoid using physical devices until it&amp;rsquo;s time to do an actual test run or one.&lt;/p></description></item><item><title>What I Learned From Selling an App</title><link>https://www.andyibanez.com/posts/what-i-learned-from-selling-an-app/</link><pubDate>Wed, 03 Mar 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/what-i-learned-from-selling-an-app/</guid><description>&lt;p>What I Learned From Selling an App&lt;/p>
&lt;p>A few weeks ago, I sold and transferred my app, &lt;a href="https://www.andyibanez.com/projects/nextanimeepisode1/">Next Anime Episode&lt;/a>, to another developer.&lt;/p>
&lt;p>In this article, I will discuss the reasons I transferred my app, and what I learned along the way in the process of transferring it.&lt;/p>
&lt;h1 id="why-i-sold-my-app">Why I Sold My App&lt;/h1>
&lt;p>As a developer who works a full time job and work on indie apps as a hobby, there are many ideas I want to work on. Having apps on the App Store is actually a really big responsibility. You have to maintain it and add features at least every so often to it in order to keep interested. If the app becomes popular enough, the pressure just grows, because you have to start dealing with negative reviews of all kinds. Sometimes justified, sometimes people don&amp;rsquo;t understand the purpose of your app, sometimes they just insult it and give no feedback whatsoever to improve it.&lt;/p></description></item><item><title>Multithreading Options on Apple Platforms</title><link>https://www.andyibanez.com/posts/multithreading-options-on-apple-platforms/</link><pubDate>Wed, 24 Feb 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/multithreading-options-on-apple-platforms/</guid><description>&lt;p>We have reached the point in which computers are really fast. Especially Apple&amp;rsquo;s, as they have control of both the hardware and software, so, oftentimes, some tasks that could be sped up with multithreading, are not necessary anymore. But, for those cases when you do need multithreading, we have many options available.&lt;/p>
&lt;p>On Apple&amp;rsquo;s platforms there is a surprising amount of concurrency tools. You are likely familiar with the most used one, the Grand Central Dispatch, &lt;code>DispatchQueue&lt;/code>, which is pretty good and it covers the vast majority of use cases. But there are some tasks that can be done easier with other tools.&lt;/p></description></item><item><title>OptionSet in Swift</title><link>https://www.andyibanez.com/posts/optionset-in-swift/</link><pubDate>Wed, 17 Feb 2021 07:30:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/optionset-in-swift/</guid><description>&lt;p>Creating configurable APIs for other developers can be a fun task. But depending on what languages and tools you are using, you may sometimes create customizable APIs that are more pleasant than others.&lt;/p>
&lt;p>In today&amp;rsquo;s article, we will explore a tiny feature in Swift that allows us to create configurable APIs easily that are a joy to use by other developers: OptionSet.&lt;/p>
&lt;h1 id="introducing-optionset">Introducing OptionSet&lt;/h1>
&lt;p>Like its name implies, an OptionSet gives us a group of options. These options are pre-defined for our users, and when create an OptionSet, our users are constrained to using the values we are providing within.&lt;/p></description></item><item><title>Intercepting iOS Network Request Calls with Proxyman</title><link>https://www.andyibanez.com/posts/intercepting-ios-network-request-calls-proxyman/</link><pubDate>Wed, 10 Feb 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/intercepting-ios-network-request-calls-proxyman/</guid><description>&lt;p>Intercepting iOS Network Request Calls with Proxyman&lt;/p>
&lt;p>Working with network APIs can be tricky, especially when debugging. You oftentimes have to ask yourself if your app is sending and receiving the expected information. You also often worry about whether the web service returns whatever it promises it will return. Working with APIs is both easy and tricky due to all the implications behind the scenes. What happens if the service goes down and sends unexpected responses? Or if your app loses internet connection? Using a proxy to intercept network calls will help us answer these questions.&lt;/p></description></item><item><title>nil-null-mess in Objective-C and Swift</title><link>https://www.andyibanez.com/posts/nil-null-mess-objective-c-and-swift/</link><pubDate>Wed, 03 Feb 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/nil-null-mess-objective-c-and-swift/</guid><description>&lt;p>All programmers are familiar with the concept of &lt;code>nullability&lt;/code>. Whether something exists or not. Whether something is there or not.&lt;/p>
&lt;p>Objective-C is very dynamic when it comes to dealing with nullability. All Objective-C programmers are familiar with this phrase:&lt;/p>
&lt;blockquote>
&lt;p>messages can be sent to nil.&lt;/p>&lt;/blockquote>
&lt;p>Which means that &lt;code>nil&lt;/code> itself can call methods, safely enough, without crashing.&lt;/p>
&lt;p>In Swift, we have a bit more safety. We can send &amp;ldquo;messages&amp;rdquo; to &lt;code>nil&lt;/code>, but only if they are the result of a chained optional. &lt;code>nil&lt;/code> can only be a thing when we are working with optionals.&lt;/p></description></item><item><title>Understanding Basic Data Structures in Swift: Dictionaries in Depth</title><link>https://www.andyibanez.com/posts/understanding-basic-data-structures-dictionaries-in-depth/</link><pubDate>Wed, 27 Jan 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/understanding-basic-data-structures-dictionaries-in-depth/</guid><description>&lt;p>Whether you are a seasoned developer with a lot of code out in the wild world, or you started learning programming this week, chances are you hace used (and seen) dictionaries being used in many places. Also known as &lt;em>hashmaps&lt;/em> or &lt;em>hash tables&lt;/em>, dictionaries allow us to store &lt;em>key-value&lt;/em> mappings, from one object to another.&lt;/p>
&lt;p>In this article we will study this structure which is known by everyone, and we will also learn about its quirks and unknown features.&lt;/p></description></item><item><title>Understanding Basic Data Structures in Swift: Sets</title><link>https://www.andyibanez.com/posts/understanding-basic-data-structures-swift-sets/</link><pubDate>Wed, 20 Jan 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/understanding-basic-data-structures-swift-sets/</guid><description>&lt;p>I&amp;rsquo;m introducing a short small series in which we will talk about basic data structures in Swift. My goal is not to show how they are implemented internally, but rather to show when they can be useful.&lt;/p>
&lt;p>In truth, unless you have studied Computer Science to some capacity, chances are you are missing on a lot of powerful existing data structures that can help you write better code. I have been studying iOS development for a long time with many resources, and none of the resources ever dive into useful data structures, such as &lt;em>sets&lt;/em>. These sources tend to focus on arrays and dictionaries only (as the focus is iOS development, and not necessarily computer science), not teaching other structures that are actually really useful in the iOS Development world. I have never seen an iOS dev resource that covered these structures as deeply as my computer systems engineering courses did.&lt;/p></description></item><item><title>Being an iOS Developer in Bolivia (and South America)</title><link>https://www.andyibanez.com/posts/being-ios-developer-bolivia/</link><pubDate>Wed, 13 Jan 2021 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/being-ios-developer-bolivia/</guid><description>&lt;p>Happy New Years everyone! To kick off this year, I wanted to write a non-technical article. This time I want to focus on a topic that you won&amp;rsquo;t find in many other places, and that is what it is like to hunt for iOS jobs in Bolivia, and what my experience has been like being one here. By the end of this article, you will hopefully understand a very different market compared to countries such as the USA, and you will be able to make a decision on whether this is a field you want to pursue or not. What I&amp;rsquo;m going to be writing about applies to Bolivia, but keep in mind that South America in general has very similar conditions and markets.&lt;/p></description></item><item><title>Happy 2021! And Short Break Notice</title><link>https://www.andyibanez.com/posts/happy-2021-short-break-notice/</link><pubDate>Sun, 20 Dec 2020 15:53:06 -0400</pubDate><guid>https://www.andyibanez.com/posts/happy-2021-short-break-notice/</guid><description>&lt;p>This has been quite a year! Not only did we have the bad stuff happen (COVID-19), it has also been a crazy year for my personal development and for the growth of my blog.&lt;/p>
&lt;p>Thanks to the events that happened mid-year, the reach of my blog has reached wide, and I have connected to a bunch of people thanks to all that.&lt;/p>
&lt;p>I want to take one minute to thank you all who have reached to me with questions about my articles, ideas, and even suggestions to improve my writing. When you guys point out typos and ask questions, it measn you guys are reading my content. It means that I am not writing in vain, and that makes me genuinely happy. When I revived my blog in 2019, I said I wanted to become an active Swift community member. I&amp;rsquo;m very happy to say this purpose has been fulfilled.&lt;/p></description></item><item><title>The "ExpressibleBy-" Protocols in Swift</title><link>https://www.andyibanez.com/posts/expressibleby-protocols-swift/</link><pubDate>Wed, 16 Dec 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/expressibleby-protocols-swift/</guid><description>&lt;p>Swift gives us many interesting features to write cleaner and more obvious code. This code is more readable, and it helps both SDK consumers and code maintainers.&lt;/p>
&lt;p>One such feature Swift has is the &lt;code>ExpressibleBy-&lt;/code> family of protocols. This is a set of protocols that allow you to instantiate objects by providing some native Swift object. For example, we can instantiate an object providing a Boolean, or a String.&lt;/p>
&lt;p>This family of protocols consist of the following protocols (this is not a complete list):&lt;/p></description></item><item><title>Getting Started with the App Store Connect API</title><link>https://www.andyibanez.com/posts/getting-started-app-store-connect-api/</link><pubDate>Wed, 09 Dec 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/getting-started-app-store-connect-api/</guid><description>&lt;p>In 2018, Apple introduced the App Store Connect API. We as iOS developers interact with App Store Connect almost daily. We like to see our sales reports, analytics, check how our apps are doing. Occasionally, we may need to register a new device or manage our users.&lt;/p>
&lt;p>Many of these tasks are so common that it was necessary to get an App Store Connect API at some point. Having an API allows us to automatize some aspects of our day to day tasks on App Store Connect, and to make some tasks easier and faster. In this article, we will explore a few features of the App Store Connect API.&lt;/p></description></item><item><title>Understanding the Limited Photo Library in iOS 14</title><link>https://www.andyibanez.com/posts/understanding-limited-photo-library-ios-14/</link><pubDate>Wed, 02 Dec 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/understanding-limited-photo-library-ios-14/</guid><description>&lt;p>This year, Apple introduced a new feature that gives users even more control over what photos may third party apps see when they see a Photo Picker. The system will first present an alert asking users if they want to give access to their photos at all, and they have the option to give access to all their photos, or only to the photos they choose.&lt;/p>
&lt;p>This is great, but it has been a very confusing experience for both users and developers alike. In this article we will explore this new privacy-focused photo picker and how to make good use of it without compromising too much of either usability and privacy.&lt;/p></description></item><item><title>Lazy Sequences in Swift</title><link>https://www.andyibanez.com/posts/lazy-sequences-in-swift/</link><pubDate>Wed, 25 Nov 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/lazy-sequences-in-swift/</guid><description>&lt;p>Lazy Sequences in Swift&lt;/p>
&lt;p>If you have been writing Swift for a while, you have undoubtedly used high order functions such as &lt;code>.map&lt;/code> and &lt;code>filter&lt;/code>. These higher order function work on any collection, and they are very useful when we want to quickly transform objects into something else, or when you want to do other operations in sequences that would otherwise take more than one line of code if you were to make them with loops.&lt;/p></description></item><item><title>Quick Tip: Custom Debug Printing with CustomDebugStringConvertible in Swift</title><link>https://www.andyibanez.com/posts/quick-tip-custom-debug-printing-customdebugstringconvertible-swift/</link><pubDate>Wed, 18 Nov 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/quick-tip-custom-debug-printing-customdebugstringconvertible-swift/</guid><description>&lt;p>Printing stuff to the console is a simple but powerful step we can take when debugging our apps. But there are times when we want to print an object and we actually get something entirely different, often also useless.&lt;/p>
&lt;p>For example, this commonly happens when working with classes and printing instances of them.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">class&lt;/span> &lt;span style="color:#f9e2af">User&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#f5e0dc">id&lt;/span>: &lt;span style="color:#89dceb">Int&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#f5e0dc">name&lt;/span>: &lt;span style="color:#89dceb">String&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">init&lt;/span>(id: &lt;span style="color:#89dceb">Int&lt;/span>, name: &lt;span style="color:#89dceb">String&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">self&lt;/span>.id = id
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">self&lt;/span>.name = name
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#f5e0dc">andy&lt;/span> = User(id: &lt;span style="color:#fab387">1&lt;/span>, name: &lt;span style="color:#a6e3a1">&amp;#34;Andy&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">print&lt;/span>(andy)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In a playground, this will print:&lt;/p></description></item><item><title>Understanding KeyPaths in Swift</title><link>https://www.andyibanez.com/posts/understanding-keypaths-swift/</link><pubDate>Wed, 11 Nov 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/understanding-keypaths-swift/</guid><description>&lt;p>KeyPath. It sounds like a very fancy word. And it is a feature you have likely used it, either knowingly or unknowingly. KeyPaths are one of my favorite features in Swift, but they can be a bit tricky to understand. In this article we will explore what KeyPaths are, and when you may want to use them.&lt;/p>
&lt;h1 id="understanding-keypaths">Understanding KeyPaths&lt;/h1>
&lt;p>In simple words, a KeyPath is a reference to an actual property instead of a value.&lt;/p></description></item><item><title>Quick Tip: Hosting JSON Files on Github for Free</title><link>https://www.andyibanez.com/posts/quick-tip-hosting-json-files-github-for-free/</link><pubDate>Wed, 04 Nov 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/quick-tip-hosting-json-files-github-for-free/</guid><description>&lt;p>There are times in which you may want to host small JSON (or other small types of files) somewhere because your app needs them. Maybe you want to configure feature flags, or maybe you want to host IAP identifiers somewhere so as to not hardcode them in your app. This last case is something I did recently.&lt;/p>
&lt;p>The immediate thought will be get a cheap server somewhere - after all, using something like &lt;a href="https://www.vultr.com/products/cloud-compute/#pricing">Vultr&lt;/a> you can get cheap hosting for as low as $2.50 per month. But did you know Github allows you to publish static websites, and you can piggyback that on that to store remote &amp;ldquo;config&amp;rdquo; about your apps?&lt;/p></description></item><item><title>Parsing Tricky JSON With Codable in Swift</title><link>https://www.andyibanez.com/posts/parsing-tricky-json-codable-swift/</link><pubDate>Wed, 28 Oct 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/parsing-tricky-json-codable-swift/</guid><description>&lt;p>If you have been writing Swift in the past couple of years, you have probably been using &lt;a href="https://developer.apple.com/documentation/swift/codable">&lt;code>Codable&lt;/code>&lt;/a> (which is really just the composition of &lt;a href="https://developer.apple.com/documentation/swift/decodable">&lt;code>Decodable&lt;/code>&lt;/a> and &lt;a href="https://developer.apple.com/documentation/swift/encodable">&lt;code>Encodable&lt;/code>&lt;/a> in the same protocol).&lt;/p>
&lt;p>If you have been writing iOS apps for longer, you likely know about &lt;a href="https://developer.apple.com/documentation/foundation/jsonserialization">&lt;code>JSONSerialization&lt;/code>&lt;/a> as well, which is the backbone of &lt;code>Codable&lt;/code> and it allows you to do more manual work when parsing JSON, seemingly giving you more control.&lt;/p>
&lt;p>If you know &lt;code>JSONSerialization&lt;/code>, you have probably found times in which Codable seemingly doesn&amp;rsquo;t give you the flexibility you need, and you may have been tempted to drop &lt;code>Codable&lt;/code> in favor of &lt;code>JSONSerialization&lt;/code> when parsing very specific or even corrupted JSON.&lt;/p></description></item><item><title>A More Practical Custom Formatter</title><link>https://www.andyibanez.com/posts/a-more-practical-custom-formatter/</link><pubDate>Wed, 21 Oct 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/a-more-practical-custom-formatter/</guid><description>&lt;p>I had announced that I wouldn&amp;rsquo;t be able to write an article this week due to it being Elections Day in my country. that said I just can&amp;rsquo;t leave you guys without article, so this is a short one.&lt;/p>
&lt;p>We will write another &lt;code>NSFormatter&lt;/code> subclass. It will allow us to compose E-mails easily. This should also help show that formatters can format string into anything else really.&lt;/p>
&lt;p>In short, we will be able to &amp;ldquo;compose&amp;rdquo; emails using raw strings, like this:&lt;/p></description></item><item><title>Silvianna for Anilist</title><link>https://www.andyibanez.com/projects/silvianna/</link><pubDate>Sat, 17 Oct 2020 11:48:58 -0400</pubDate><guid>https://www.andyibanez.com/projects/silvianna/</guid><description>&lt;p>Silvianna is the best Anilist client for iOS.&lt;/p>
&lt;p>Anilist is the popular website for anime and manga fans, where you can keep track of your favorite series, or discover something new to watch or read.&lt;/p>
&lt;p>Silvianna comes packed with power features for list management. The app allows you to modify anything about items on your list as long as it is supported by Anilist.&lt;/p>
&lt;p>FEATURES:&lt;/p>
&lt;ul>
&lt;li>Friendly on the smallest iPhone and the biggest iPad.&lt;/li>
&lt;li>Keep track of series that are currently airing easily. Series that you haven&amp;rsquo;t watcheda all the episodes of and are currently airing will have a visible red banner telling you how many episodes behind you are, making it easy to keep track of everything you watch.&lt;/li>
&lt;li>When you finish watching a series, you will automatically be prompted for the rating. You no longer need to navigate through different screens if you weren&amp;rsquo;t able to rate something you watched.&lt;/li>
&lt;li>When rating a series, it will use the rating system currently set in your Anilist account. It doesn&amp;rsquo;t matter if you are using the standard 10 point system, 10 point decimal system, 5-star system, or even the Emoji system - Silvianna supports all the rating systems provided by Anilist.&lt;/li>
&lt;li>If your rating system supports Advanced Scoring, Silvianna will grab your parameters and you will be able to also perform advanced scoring according to your custom parameters.&lt;/li>
&lt;li>You have access to your Anilist profile, so you can access your Manga and Anime lists easily and quickly.&lt;/li>
&lt;li>Multiwindow support on the iPad.&lt;/li>
&lt;li>You can search the entire Anilist database for Anime and Manga.&lt;/li>
&lt;/ul>
&lt;p>This is just the initial release of Silvianna, and we are excited to make the project grow with your feedback and ideas.&lt;/p></description></item><item><title>Writing Custom NSFormatters in Swift</title><link>https://www.andyibanez.com/posts/writing-custom-nsformatters-swift/</link><pubDate>Wed, 14 Oct 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/writing-custom-nsformatters-swift/</guid><description>&lt;p>Last year we explored &lt;a href="https://www.andyibanez.com/posts/nsformatter/">some NSFormatters and how to use them&lt;/a>. We also explored some formatters &lt;a href="https://www.andyibanez.com/posts/formatting-relative-dates-relativedatetimeformatter/">introduced in iOS 13&lt;/a>. Finally, a few weeks ago &lt;a href="https://www.andyibanez.com/posts/formatting-notes-and-gotchas/">we learned about yet more formatters, and how to better use the ones we already had&lt;/a>. In short, we have explored how powerful NSFormatter is. One thing we haven&amp;rsquo;t done yet though, is to write our own custom &lt;code>NSFormatter&lt;/code> subclass.&lt;/p>
&lt;h1 id="nsformatter">NSFormatter&lt;/h1>
&lt;p>&lt;code>NSFormatter&lt;/code> is an abstract class. All formatter classes inherit from it. In Swift, everything we need about it is &lt;code>open&lt;/code>, so we can create our own &lt;code>NSFormatters&lt;/code> with ease.&lt;/p></description></item><item><title>Benchmarking Your App with MetricKit</title><link>https://www.andyibanez.com/posts/benchmarking-app-metrickit/</link><pubDate>Wed, 07 Oct 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/benchmarking-app-metrickit/</guid><description>&lt;p>Sometimes we may be interested on how well our app is performing out there in the world. After all, our apps may be running in different environments that are hard to test or that Instruments may not catch.&lt;/p>
&lt;p>For this purpose, Apple introduced MetricKit back in WWDC2019. MetricKit allows us to aggregate and analyze this benchmark data on a per-device basis, and not only does it include information on performance and battery usage, but also on exceptions and crash reports.&lt;/p></description></item><item><title>Formatting Notes and Gotchas</title><link>https://www.andyibanez.com/posts/formatting-notes-and-gotchas/</link><pubDate>Wed, 30 Sep 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/formatting-notes-and-gotchas/</guid><description>&lt;p>A year ago, we talked about &lt;a href="https://www.andyibanez.com/posts/nsformatter/">using NSFormatter for formatting data in a human readable format&lt;/a>. WWDC2020 brings some updates and changes to the &lt;code>NSFormatter&lt;/code> APIs that we need to be aware of. This article will complement the NSFormatter article from last year with best practices and things to look out for.&lt;/p>
&lt;h1 id="improvements-for-combinations-of-languages-and-regions">Improvements for Combinations of Languages and Regions.&lt;/h1>
&lt;p>&lt;code>NSFormatter&lt;/code> always does its best to format the data according to the user&amp;rsquo;s language and region where relevant. Apple is improving the combinations for this because it&amp;rsquo;s highly common for people to set their phones in a language that is not commonly used in a given region. This is pretty exciting for me, because I live in Bolivia where people speak Spanish, but I have used my devices in English for as long as I can remember.&lt;/p></description></item><item><title>A Short Guide to Localization on Apple Platforms</title><link>https://www.andyibanez.com/posts/a-short-guide-localization-apple-platforms/</link><pubDate>Wed, 23 Sep 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/a-short-guide-localization-apple-platforms/</guid><description>&lt;p>Translating our apps in different languages helps us reach wider audiences of different cultures. This reach can increase our app usage considerably and offer more monetization properties.&lt;/p>
&lt;p>In this short article we will mention the features Apples gives us to translate our apps to different languages, namely &lt;code>NSLocalizedString&lt;/code> and and &lt;code>stringsdict&lt;/code> files. You will also understand when you will want to use each, as they have different use cases and an app that takes localization seriously will use both.&lt;/p></description></item><item><title>WWDC2020: What's new in CryptoKit</title><link>https://www.andyibanez.com/posts/wwdc2020-whats-new-cryptokit/</link><pubDate>Mon, 14 Sep 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/wwdc2020-whats-new-cryptokit/</guid><description>&lt;p>CryptoKit, introduced in WWDC2019, allows us to &lt;a href="https://www.andyibanez.com/posts/common-cryptographic-operations-with-cryptokit/">perform cryptographic operations very easily&lt;/a>.&lt;/p>
&lt;p>While CryptoKit still doesn&amp;rsquo;t offer many algorithms and functionality, it&amp;rsquo;s still growing, and this year CryptoKit and do more.&lt;/p>
&lt;h1 id="hkdf">HKDF&lt;/h1>
&lt;p>Key derivation functions have been available from day one, but it wasn&amp;rsquo;t possible to derive keys independently. It was only possible to do so if you were using elliptic curve key agreement protocols.&lt;/p>
&lt;p>To do this, there is a new &lt;code>HKDF&lt;/code> object with static methods. One such method is &lt;code>deriveKey&lt;/code> with multiple overloads:&lt;/p></description></item><item><title>Logging Messages With the Unified Logging System on Apple Platforms</title><link>https://www.andyibanez.com/posts/logging-messages-unified-logging-system-apple-platforms/</link><pubDate>Wed, 09 Sep 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/logging-messages-unified-logging-system-apple-platforms/</guid><description>&lt;p>Last time we &lt;a href="https://www.andyibanez.com/posts/introduction-apples-unified-logging-system-ios14-swift/">talked about the basics of the Unified Logging System&lt;/a>, we set the basic concepts and code we need to write logs, along with the different logging levels, and more.&lt;/p>
&lt;p>In this article we will talk about actually logging messages, how the framework is &amp;ldquo;smart enough&amp;rdquo; to strip out sensitive user info by default, and how we can control what gets stripped.&lt;/p>
&lt;h1 id="logging-messages">Logging Messages&lt;/h1>
&lt;p>The framework supports interpolated strings right out of the box when you are using the new system in Swift.&lt;/p></description></item><item><title>Using ASWebAuthenticationSession with SwiftUI</title><link>https://www.andyibanez.com/posts/using-aswebauthenticationaession-swiftui/</link><pubDate>Wed, 02 Sep 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/using-aswebauthenticationaession-swiftui/</guid><description>&lt;p>Working with REST APIs you have no control over can be a little monotonous. This is especially for OAuth 2.0 API that need you to do a little bit of setup, get your API keys with the service provider, and then you need to do the setup on your app&amp;rsquo;s size: Configure your URL scheme, deal with that URL Scheme, and write code that does something when your app gets called with that URL.&lt;/p></description></item><item><title>Introduction to Apple's Unified Logging System on iOS 14 in Swift</title><link>https://www.andyibanez.com/posts/introduction-apples-unified-logging-system-ios14-swift/</link><pubDate>Wed, 26 Aug 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/introduction-apples-unified-logging-system-ios14-swift/</guid><description>&lt;p>It is no surprise that software tend to write logs to a local file as they execute. As events, errors, or exceptional situations occur, a lot of software takes note of them using a local logging solution. This is done because these practices can allow us to troubleshoot problems for our users, find bugs, and in general understand the behavior of our software in untested or lesser tested scenarios.&lt;/p>
&lt;p>When comes to iOS and other Apple platforms, there have always been third party dependencies that allow you to do this. A lot of developers roll their own solution and write events in plain text files. It wasn&amp;rsquo;t until iOS 8 and macOS 10.10 that Apple provided us with a unified logging system that is easy to use and is very performant - &lt;a href="https://developer.apple.com/documentation/os/oslog">&lt;code>OSLog&lt;/code>&lt;/a>.&lt;/p></description></item><item><title>Sponsor Me</title><link>https://www.andyibanez.com/sponsorship/</link><pubDate>Thu, 20 Aug 2020 00:00:00 -0400</pubDate><guid>https://www.andyibanez.com/sponsorship/</guid><description>&lt;p>Each month, over 35,000 developers from all over the world find their way to this website, looking to read about iOS, iPadOS, and Swift development in general. Since the site was launched a year ago, it has enjoyed constant growth and an increase in visitors every month.&lt;/p>
&lt;p>If you are interested in sponsoring andyibanez.com, please send an e-mail to &lt;a href="mailto:sponsor@andyibanez.com">sponsor@andyibanez.com&lt;/a>. I take care to reply to all inquiries sent to this address within 24 hours. Ensure you can receive e-mails from the andyibanez.com and andresibanez.com domains.&lt;/p></description></item><item><title>Simpler File Encryption on iOS</title><link>https://www.andyibanez.com/posts/simpler-file-encryption-ios/</link><pubDate>Wed, 19 Aug 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/simpler-file-encryption-ios/</guid><description>&lt;p>It&amp;rsquo;s not news that iOS has a heavy a focus on privacy and security. Apple provides us with many tools to make encryption easy, like &lt;a href="https://www.andyibanez.com/posts/common-cryptographic-operations-with-cryptokit/">CryptoKit&lt;/a>, a high-level Cryptography framework on iOS. When &lt;a href="https://www.andyibanez.com/posts/cryptokit-not-enough/">CryptoKit is not enough&lt;/a>, we can leverage older, lower-level APIs to do more cryptographic operations or use cyphers not covered by CryptoKit. We can even make use of &lt;a href="https://www.andyibanez.com/posts/cryptokit-secure-enclave/">the Secure Enclave&lt;/a> to leverage hardware-level security to our apps.&lt;/p>
&lt;p>This is all cool and dandy but did you know that you don&amp;rsquo;t need to leverage any of the technologies above to secure data in your app? In this article we will provide a much simpler method to protect user data, without having to know the first thing about Cryptography at all, and without compromising security at all. If you know you need to protect data, you can consider this option before even considering directly dealing with cryptography at all.&lt;/p></description></item><item><title>andyibanez.com Turns One Year Old</title><link>https://www.andyibanez.com/posts/andyibanez-com-turns-one-year-old/</link><pubDate>Tue, 18 Aug 2020 00:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/andyibanez-com-turns-one-year-old/</guid><description>&lt;p>AndyIbanez.com Turns 1 Year Old (?) Today&lt;/p>
&lt;p>I just wanted to let you all know that this website is having a birthday today! ð&lt;/p>
&lt;p>I started working on my new website earlier on August last year. I want to take the time to reflect about the previous year, and to thank everyone I have had the pleasure of meeting and interacting with since this all started.&lt;/p>
&lt;h1 id="my-website-is-actually-older">My Website Is Actually Older&lt;/h1>
&lt;p>I actually started to blog about iOS when I was a college freshman all the way back in 2011. You can find an archive of the old Wordpress-based website &lt;a href="https://www.andyibanez.com/old-content/">here&lt;/a>. I have rewritten some articles to publish them here, and I may continue to do it depending on what I find necessary.&lt;/p></description></item><item><title>A File Download Queue in Combine for Swift</title><link>https://www.andyibanez.com/posts/file-download-queue-combine/</link><pubDate>Wed, 12 Aug 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/file-download-queue-combine/</guid><description>&lt;p>Combine allows us to create pipelines for a lot of tasks. Thanks to the fact it can do work concurrently without leveraging callbacks, it is very easy to build things that would otherwise be very complex.&lt;/p>
&lt;p>In this short article, we will build a file download queue that downloads images sequentially. You can use this as the base for more complex queues.&lt;/p>
&lt;p>The queue will download an array of images sequentially. If you wanted to support concurrent queues, it would probably be wise to instantiate this publisher as many times as necessary.&lt;/p></description></item><item><title>Common Reasons for Background Tasks to Fail in iOS</title><link>https://www.andyibanez.com/posts/common-reasons-background-tasks-fail-ios/</link><pubDate>Wed, 05 Aug 2020 00:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/common-reasons-background-tasks-fail-ios/</guid><description>&lt;p>&lt;a href="https://www.andyibanez.com/posts/modern-background-tasks-ios13/">Apple introduced modern background tasks last year on iOS 13&lt;/a>. These new APIs have been out for a little over year (counting the beta period). Many developers have tried to adopt them to moderate success. Many of them have found them to be very unpredictable and that only work a fraction of the time. If you look around the internet (and even on the comments in that article), you will see many developers weren&amp;rsquo;t able to get them to work as expected.&lt;/p></description></item><item><title>Adding Custom SwiftUI Views and Modifiers to the Xcode Library</title><link>https://www.andyibanez.com/posts/custom-views-modifiers-xcode-library-swiftui/</link><pubDate>Wed, 29 Jul 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/custom-views-modifiers-xcode-library-swiftui/</guid><description>&lt;p>Xcode 12 introduces the ability for developers to add their own SwiftUI views and modifiers to the Xcode library. This allows people using your code to discover your custom views, makes your codebase easier to learn, and it allows you to visually edit complex views visually rather than with code.&lt;/p>
&lt;p>In this short article we will explore how we can add our own views and modifiers to the Xcode library.&lt;/p></description></item><item><title>Wrapping Asynchronous APIs into Combine Futures</title><link>https://www.andyibanez.com/posts/wrapping-asynchronous-apis-into-combine-futures/</link><pubDate>Wed, 22 Jul 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/wrapping-asynchronous-apis-into-combine-futures/</guid><description>&lt;p>Two of the concepts used a lot in Reactive Programming are the &lt;em>Future&lt;/em> and &lt;em>Promises&lt;/em>. Whether you have been using Combine for a while or are new to Reactive Programming, chances are you have seen these two words. These terms date to years ago. And I would be lying if I told you I knew what that they were for until I started learning Combine. The first time I heard about Futures and Promises was back in my NodeJS job half a decade ago, and I didn&amp;rsquo;t understand these concepts back then.&lt;/p></description></item><item><title>Sharing Data Across Apple Devices with the MultipeerConnectivity Framework</title><link>https://www.andyibanez.com/posts/sharing-data-apple-devices-multipeerconnectivity-framework/</link><pubDate>Wed, 15 Jul 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/sharing-data-apple-devices-multipeerconnectivity-framework/</guid><description>&lt;p>There are times when we may want to share data across instances of our app running on different physical devices. You could develop a server or even leverage cloud storage, but did you know Apple provides a framework to share data &lt;em>directly&lt;/em> across devices, without having to use an intermediary? This framework is the MultipeerConnectivity framework, and it has actually been around for a while. In this article, we will explore this framework to understand how we can use it to share data across instances of our app in different devices directly.&lt;/p></description></item><item><title>New UIDatePicker in iOS 14</title><link>https://www.andyibanez.com/posts/new-uidatepicker-ios14/</link><pubDate>Wed, 08 Jul 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/new-uidatepicker-ios14/</guid><description>&lt;p>WWDC2020 brought many interesting and unexpected updates to many old and well known APIs. In this article, we will explore what&amp;rsquo;s new with &lt;code>UIDatePicker&lt;/code> on iOS, an API that has existed since the dawn of time and hasn&amp;rsquo;t changed much since its introduction.&lt;/p>
&lt;h1 id="a-short-history-on-pickers">A Short History on Pickers&lt;/h1>
&lt;p>&lt;code>UIDatePicker&lt;/code> is an API that has existed since the very early days of the iOS SDK - it goes all the way back to iOS 2.0.&lt;/p></description></item><item><title>UIMenu Improvements in iOS 14</title><link>https://www.andyibanez.com/posts/uimenu-improvements-ios14/</link><pubDate>Thu, 18 Jun 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/uimenu-improvements-ios14/</guid><description>&lt;p>&lt;a href="https://developer.apple.com/documentation/uikit/uimenu">&lt;code>UIMenu&lt;/code>&lt;/a> is a new set of APIs that were originally introduced in iOS 13. The API allows us to add menus to different parts of our UIs, including binding actions to key combinations when using your iOS or iPadOS device with a keyboard. Starting on iOS and iPadOS 14 (and ported to macOS Catalyst), this object is more prevalent in the UI thanks to the fact it can be invoqued from different actions.&lt;/p></description></item><item><title>The secret entitlements behind Default Apps on iOS</title><link>https://www.andyibanez.com/posts/default-apps-may-not-be-possible-all-devs/</link><pubDate>Tue, 23 Jun 2020 22:42:31 -0400</pubDate><guid>https://www.andyibanez.com/posts/default-apps-may-not-be-possible-all-devs/</guid><description>&lt;p>I hate that my first WWDC article is going to be as lazy as this, but I thought I&amp;rsquo;d write about it anyway so as to at least give an starting point to devs who will want to try creating their own default web browser or e-mail client on iOS and iPadOS.&lt;/p>
&lt;p>Please note the vast majority of my thoughts here are based on a very short response I received on the dev forums. I may be awfully wrong. I am leaving a link to my original question in the dev forums so you can check it out, and reach your own conclusions. The link can be viewed by anyone and it&amp;rsquo;s not locked behind an Apple Developer membership.&lt;/p></description></item><item><title>Error Protocol Specializations in Swift</title><link>https://www.andyibanez.com/posts/error-protocol-specializations-swift/</link><pubDate>Thu, 18 Jun 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/error-protocol-specializations-swift/</guid><description>&lt;p>Earlier this week I was scrolling through my Twitter feed as usual and I found &lt;a href="https://twitter.com/harlanhaskins/status/1270399151730118656?s=20">this tweet&lt;/a> that made me realize I may have been handling errors incorrectly in Swift all my life. This prompted me to research a bit more about error handling in Swift, and it turns out there&amp;rsquo;s many specialized &lt;code>Error&lt;/code> protocols you can conform to, and you should probably be using them over the default &lt;code>Error&lt;/code> provided by the language. All these specializations conform to &lt;code>Error&lt;/code> themselves. In this article, we will explore a few specializations we can use when dealing with errors in Swift.&lt;/p></description></item><item><title>Please Help, Apple Is Threatening To Terminate My Apple Developer Account With No Clear Reason.</title><link>https://www.andyibanez.com/posts/please-help-apple-threatening-terminate-apple-developer-account/</link><pubDate>Wed, 17 Jun 2020 11:22:35 -0400</pubDate><guid>https://www.andyibanez.com/posts/please-help-apple-threatening-terminate-apple-developer-account/</guid><description>&lt;p>&lt;strong>UPDATE&lt;/strong>&lt;/p>
&lt;p>June 18, 2020 at 10:24 PM EST: I have made contact with a human at Apple after they reached to me via Resolution Center. We are working on solving the issues, and while I have not been told &amp;ldquo;yes, your account will not be terminated&amp;rdquo;, I believe in good faith we will work something out. Yes, the issue was my fault after all, but they are being very understanding and are letting me redeem myself by uploading a new binary. A proper update on this issue will come at a later date.&lt;/p></description></item><item><title>Document Scanning and Text Recognition With Vision and VisionKit on iOS</title><link>https://www.andyibanez.com/posts/scanning-and-text-recognition-with-visionkit/</link><pubDate>Wed, 10 Jun 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/scanning-and-text-recognition-with-visionkit/</guid><description>&lt;p>It is amazing what we can do with smartphones these days. Document scanning and text recognition are nothing new. But being able to have such a functionality in our pockets is pretty neat. These days we can create apps that have such features very quickly thanks to the push Apple has been doing to promote Machine Learning and Artificial Intelligence on their devices.&lt;/p>
&lt;p>Starting on iOS 11, we can natively scan documents with a system framework called VisionKit, and we can perform operations on images using a framework called Vision. It wasn&amp;rsquo;t until iOS 13 that we finally had the ability to recognize text on images ourselves using the Vision framework, without leveraging third party libraries. In this article we will explore how we can use the VisionKit framework to scan documents and the Vision framework to detect text as two separate tasks, so you can see how easy these two tasks are and you can learn to put them together.&lt;/p></description></item><item><title>Using the iOS Keychain with Biometrics</title><link>https://www.andyibanez.com/posts/ios-keychain-touch-id-face-id/</link><pubDate>Wed, 03 Jun 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/ios-keychain-touch-id-face-id/</guid><description>&lt;p>If you have been &lt;a href="https://www.andyibanez.com/posts/using-ios-keychain-swift/">using the keychain on your iOS apps&lt;/a> you may want to start using Face ID/Touch ID to let your user access your app and their data. This is a common use case but it&amp;rsquo;s very easy to do incorrectly.&lt;/p>
&lt;p>Apple introduced Touch ID all the way back in 2013, and ever since then, every iOS device has come with some sort of biometric authentication method, be it Touch ID or Face ID. This has allowed developers to implement convenient unlocking into their apps to access sensitive data without having to ask for the passcode. If your app &amp;ldquo;locks&amp;rdquo; access in any way your users are probably expecting to &amp;ldquo;unlock&amp;rdquo; with their finger or Face ID, so it is your responsibility to implement in a way that is secure and can&amp;rsquo;t be vulnered.&lt;/p></description></item><item><title>Using the iOS Keychain in Swift</title><link>https://www.andyibanez.com/posts/using-ios-keychain-swift/</link><pubDate>Wed, 27 May 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/using-ios-keychain-swift/</guid><description>&lt;p>&lt;em>This article is an entirely rewritten version of an old tutorial I wrote years ago titled &amp;ldquo;Using the iOS Keychain&amp;rdquo;. Originally written in Objective-C, the old version has been archived but it is accessible &lt;a href="https://www.andyibanez.com/old-content/">here&lt;/a>.&lt;/em>&lt;/p>
&lt;p>The Keychain is the place where you would store sensitive data. As secure as iOS currently is, the keychain is the right place to store passwords, authentication tokens, and other sensitive data. You should not store this kind of data in &lt;code>UserDefaults&lt;/code>, even if iOS has made it harder to access that data for normal users in the latest versions.&lt;/p></description></item><item><title>Writing Content Blockers for iOS</title><link>https://www.andyibanez.com/posts/content-blockers-in-ios/</link><pubDate>Wed, 20 May 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/content-blockers-in-ios/</guid><description>&lt;p>A few years ago, Apple introduced the Content Blocking APIs to Safari. Using these APIs, developers are able to write extensions that allow Safari to block content users do not want to see.&lt;/p>
&lt;p>Most commonly used for ads, content blockers are not really &lt;em>ad blockers&lt;/em>. While they can, and commonly do, block ads, developers can write content blockers for all kind of content, including profanity, or other questionable content.&lt;/p>
&lt;h1 id="content-blocking-vs-ad-blocking">Content Blocking VS Ad Blocking.&lt;/h1>
&lt;p>Content Blockers are actually very limited in terms of what they can do. We cannot really achieve the level of functionality especialized extensions such as AdBlock Plus have to offer. Apple&amp;rsquo; implementation has two main focuses in mind:&lt;/p></description></item><item><title>Dependency Injection with Storyboards on Apple Platforms</title><link>https://www.andyibanez.com/posts/dependency-injection-storyboards/</link><pubDate>Wed, 13 May 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/dependency-injection-storyboards/</guid><description>&lt;p>Every iOS developer has written a line of code like this one at least once:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">class&lt;/span> &lt;span style="color:#f9e2af">DollInfoViewController&lt;/span>: UIViewController {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f38ba8">var&lt;/span> &lt;span style="color:#f5e0dc">dollModel&lt;/span>: Doll?
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#cba6f7">override&lt;/span> &lt;span style="color:#f38ba8">func&lt;/span> &lt;span style="color:#89b4fa">viewDidLoad&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#fab387">super&lt;/span>.viewDidLoad()
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#6c7086;font-style:italic">// Do any additional setup after loading the view.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Or in the worst case, you may have seen code like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">var&lt;/span> &lt;span style="color:#f5e0dc">dollModel&lt;/span>: Doll!
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Then, when you want to create a view controller of that type you&amp;rsquo;d do:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// First we need to check if we can actually instantiate the view controller.&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#cba6f7">guard&lt;/span> &lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#f5e0dc">dollInfoVc&lt;/span> = storyboard?.instantiateViewController(withIdentifier: &lt;span style="color:#a6e3a1">&amp;#34;DollInfo&amp;#34;&lt;/span>) &lt;span style="color:#cba6f7">as&lt;/span>? DollInfoViewController &lt;span style="color:#cba6f7">else&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#89dceb">fatalError&lt;/span>(&lt;span style="color:#a6e3a1">&amp;#34;Unable to load view controller.&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#6c7086;font-style:italic">// Then we pass in the data we want to work with. &lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>dollInfoVc.dollModel = doll
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Code like this is &lt;em>very&lt;/em> error prone. The worst part is that up untul iOS 13, it was pretty much necessary to pass data around from view controller to view controller. It&amp;rsquo;s not possible to do this in any different way in different iOS versions.&lt;/p></description></item><item><title>Quick Introduction Reflection in Swift</title><link>https://www.andyibanez.com/posts/quick-introduction-reflection-swift/</link><pubDate>Wed, 06 May 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/quick-introduction-reflection-swift/</guid><description>&lt;p>If you have been programming for a few years, you have undoubtedly come across the term &lt;em>Reflection&lt;/em>. This feature allows us to inspect and work with the members of a type.&lt;/p>
&lt;p>if this doesn&amp;rsquo;t make sense, suppose you wanted to check &lt;em>what&lt;/em> members a type has. How would you do this? Ideally you&amp;rsquo;d like to iterate over its members and print them. This is a very basic application of Reflection, but it should let think of other potential uses for it.&lt;/p></description></item><item><title>Understanding @dynamicMemberLookup and @dynamicCallable in Swift</title><link>https://www.andyibanez.com/posts/understanding-dynamicmemberlookup-dynamiccallable-swift/</link><pubDate>Wed, 29 Apr 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/understanding-dynamicmemberlookup-dynamiccallable-swift/</guid><description>&lt;p>If you have written code in a programming language such as Python or PHP, you can find many direct comparisons to Swift. For one, Swift is statically typed, whereas PHP and Python are not - Swift is considered a safe language as it has a bunch of features to protect you against mistakes - static typing, error throwing, optionality for dealing with nulls, to name a few -, whereas PHP and Python do not.&lt;/p></description></item><item><title>Writing Command Line Tools in Swift Using ArgumentParser, Part 6: Releasing And Installing Our Command Line Tool</title><link>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part6/</link><pubDate>Wed, 22 Apr 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part6/</guid><description>&lt;p>I wasn&amp;rsquo;t sure if I should include this article as part of this series. But for the sake of completion, I decided to include it. This article is very short, but it tells us how to actually install our own tool in a system so we can start using it without writing its full path.&lt;/p>
&lt;p>To recap, and before I end my series in Swift&amp;rsquo;s &lt;code>ArgumentParser&lt;/code>, let&amp;rsquo;s give a quick overview of everything we have learned so far:&lt;/p></description></item><item><title>Writing Command Line Tools in Swift Using ArgumentParser, Part 5: Tools with Asynchronous APIs</title><link>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part5/</link><pubDate>Wed, 15 Apr 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part5/</guid><description>&lt;p>In the past four weeks we have explored many of the features available to us via ArgumentParser and how to use them. Here&amp;rsquo;s a recap of everything we learned so far:&lt;/p>
&lt;ul>
&lt;li>We learned the &lt;a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part1/">very basics&lt;/a>&lt;/li>
&lt;li>We learned how to &lt;a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part2/">validate user input&lt;/a>&lt;/li>
&lt;li>We explored a way to &lt;a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part3/">separate our tool into subcommands&lt;/a>.&lt;/li>
&lt;li>And finally, we learned how we can &lt;a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part4/">improve our documentation pages&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>In this article, we will not explore a feature exposed to us via ArgumentParser. Instead, we will learn how to do something very essential: Creating tools that require asynchronous APIs.&lt;/p></description></item><item><title>Writing Command Line Tools in Swift Using ArgumentParser, Part 4: Customizing Help</title><link>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part4/</link><pubDate>Wed, 08 Apr 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part4/</guid><description>&lt;p>Writing Command Line Tools in Swift Using ArgumentParser, Part 4: Customizing Help&lt;/p>
&lt;p>In the past few weeks, we have explored how to use &lt;code>ArgumentParser&lt;/code> and many of its features. It&amp;rsquo;s great that &lt;code>ArgumentParser&lt;/code> provides a lot of functionality for free, but it wouldn&amp;rsquo;t make sense to build great tools that users can&amp;rsquo;t figure out how to use. This week is all about that.&lt;/p>
&lt;p>We saw how &lt;code>ArgumentParser&lt;/code> can build a lot of documentation for free, but we can actually do more. This week, we will explore how we can improve the documentation generated for our command line tools.&lt;/p></description></item><item><title>Writing Command Line Tools in Swift Using ArgumentParser, Part 3: Subcommands</title><link>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part3/</link><pubDate>Wed, 01 Apr 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part3/</guid><description>&lt;p>We have been having a lot of fun with ArgumentParser in the last two weeks, and the fun is not about to end any time soon. We have explored how we can &lt;a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part1/">build basic commands with the basic building blocks of the framework&lt;/a>, and how we can perform &lt;a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part2/">advanced validation and error handling&lt;/a>. This week, we will something very useful: Subcommands.&lt;/p>
&lt;h1 id="subcommands">Subcommands&lt;/h1>
&lt;p>If you have used &lt;code>git&lt;/code> directly from the command line before, you have used subcommands before.&lt;/p></description></item><item><title>Writing Command Line Tools in Swift Using ArgumentParser, Part 2: Validation &amp; Errors</title><link>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part2/</link><pubDate>Wed, 25 Mar 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part2/</guid><description>&lt;p>&lt;a href="https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part1/">Last week&lt;/a> we explored how we can build a simple command line tool. We learned how to use &lt;code>@Argument&lt;/code>, &lt;code>@Option&lt;/code>, and &lt;code>@Flag&lt;/code> as the building blocks for &lt;code>ArgumentParser&lt;/code> command line tools. We we saw last week was enough to build many simple tools, but there&amp;rsquo;s still a lot to explore, and cool things to learn.&lt;/p>
&lt;p>This week we will learn about input validation and errors, so we can build better tools that take more constrained parameters when relevant.&lt;/p></description></item><item><title>Writing Command Line Tools in Swift Using ArgumentParser, Part 1: Introduction &amp; Basic Usage</title><link>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part1/</link><pubDate>Wed, 18 Mar 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/writing-commandline-tools-argumentparser-part1/</guid><description>&lt;p>A few weeks ago, the Swift project introduced the &lt;code>ArgumentParser&lt;/code> package. This package makes it easy to write command line tools by providing automatic parsing, documentation generation, and more.&lt;/p>
&lt;p>In this article, we will explore &lt;a href="https://swift.org/blog/argument-parser/">&lt;code>ArgumentParser&lt;/code>&lt;/a>, and how we can start building some command line tools with it, using the basic building blocks, which are three Property Wrappers called &lt;code>Argument&lt;/code>, &lt;code>Option&lt;/code>, and &lt;code>Flag&lt;/code>.&lt;/p>
&lt;h1 id="project-configuration">Project Configuration&lt;/h1>
&lt;p>Open Xcode and create a new project of type &amp;ldquo;Command Line Tool&amp;rdquo;. You cannot use this project type for iOS/iPadOS, so if you don&amp;rsquo;t find it, head over to the Mac tab.&lt;/p></description></item><item><title>Understanding Function Builders in Swift</title><link>https://www.andyibanez.com/posts/understanding-function-builders/</link><pubDate>Wed, 11 Mar 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/understanding-function-builders/</guid><description>&lt;p>WWDC2020 is just around the corner*, and it hasn&amp;rsquo;t been one year since WWDC2019 took place. There is still a lot of ground to cover regarding the new tools and APIs demonstrated then. and In this article we will focus on a feature new to Swift itself: Function Builders.&lt;/p>
&lt;p>&lt;em>*: Maybe. :(&lt;/em>&lt;/p>
&lt;p>If you have been hacking away at SwiftUI, you have probably been wondering how it makes it possible to build great UIs with very nice syntactic sugar. Other than &lt;a href="https://www.andyibanez.com/posts/understanding-property-wrappers-swift/">property wrappers&lt;/a>, SwiftUI is also possible thanks to Function Builders. In this article, we will briefly mention how SwiftUI uses Function Builders, and later we will create our own function builders that have nothing not do with SwiftUI. This way, it will become evident why Function Builders are really neat, and why they don&amp;rsquo;t have to be strictly tied to SwiftUI.&lt;/p></description></item><item><title>Finding Related Words with NLEmbedding</title><link>https://www.andyibanez.com/posts/using-nlembeddings/</link><pubDate>Wed, 04 Mar 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/using-nlembeddings/</guid><description>&lt;p>There may be cases in which you need to find related words to others. With the &lt;a href="https://developer.apple.com/documentation/naturallanguage/nlembedding">&lt;code>NSLEmbedding&lt;/code>&lt;/a> class, you can find related strings based on the proximity of their vectors.&lt;/p>
&lt;h1 id="using-nlembedding">Using NLEmbedding&lt;/h1>
&lt;p>Using &lt;code>NLEmbedding&lt;/code> is very straight forward. A simple task is to get an array of related words, which come as an array of &lt;code>(String, NLDistance)&lt;/code> back.&lt;/p>
&lt;p>The distance between words tells you how &amp;ldquo;related&amp;rdquo; they are&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#f5e0dc">embedding&lt;/span> = NLEmbedding.wordEmbedding(&lt;span style="color:#cba6f7">for&lt;/span>: .english)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#f5e0dc">foundWords&lt;/span> = embedding!.neighbors(&lt;span style="color:#cba6f7">for&lt;/span>: &lt;span style="color:#a6e3a1">&amp;#34;family&amp;#34;&lt;/span>, maximumCount: &lt;span style="color:#fab387">3&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#89dceb">print&lt;/span>(foundWords)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In this example, it will print:&lt;/p></description></item><item><title>Analyzing Natural Language Text with NLTagger</title><link>https://www.andyibanez.com/posts/analyzing-text-nltagger/</link><pubDate>Wed, 26 Feb 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/analyzing-text-nltagger/</guid><description>&lt;p>In the past few weeks, we have explored how we can &lt;a href="https://www.andyibanez.com/posts/tokenizing-nltokenizer/">tokenize natural language text&lt;/a> and how to &lt;a href="https://www.andyibanez.com/posts/recognizing-language-nllanguagerecognizer/">recognize the language a natural language text is written in&lt;/a>. This week we will continue exploring more natural language APIs provided by the &lt;code>NaturalLanguage&lt;/code> framework. We will learn about the &lt;a href="https://developer.apple.com/documentation/naturallanguage/nltagger">NLTagger&lt;/a> class, which allows us to to analyze natural language text to find parts of speech, lexical classes, lemma, scripts, and more. This API, introduced in iOS 12, implements machine learning to work, and just like the other &lt;code>NaturalLanguage&lt;/code> classes, is very easy to use.&lt;/p></description></item><item><title>Recognizing the language in a Natural Language Text with NLanguageRecognizer</title><link>https://www.andyibanez.com/posts/recognizing-language-nllanguagerecognizer/</link><pubDate>Wed, 19 Feb 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/recognizing-language-nllanguagerecognizer/</guid><description>&lt;p>Continuing my trend of writing about language processing, today I want to discuss about identifying the language of a body of text. This is an interesting task we can do thanks, once again, to Apple&amp;rsquo;s investment in APIs linked to machine learning.&lt;/p>
&lt;p>Today we will explore the &lt;a href="https://developer.apple.com/documentation/naturallanguage/nllanguagerecognizer">&lt;code>NLLanguageRecognizer&lt;/code>&lt;/a> object. Introduced in iOS 12, this class can do a lot of language recognizing, from detecting the &amp;ldquo;dominant language&amp;rdquo; of a string, to all the possible languages.&lt;/p></description></item><item><title>Tokenizing Natural Language into Semantic Units in iOS</title><link>https://www.andyibanez.com/posts/tokenizing-nltokenizer/</link><pubDate>Wed, 12 Feb 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/tokenizing-nltokenizer/</guid><description>&lt;p>Working with Natural Language is possible thanks to machine learning. Starting on iOS 12, Apple has provided many APIs just for this task. In this article we will explore how to use &lt;a href="https://developer.apple.com/documentation/naturallanguage/nltokenizer">&lt;code>NLTokenizer&lt;/code>&lt;/a> to separate natural language text into its proper units.&lt;/p>
&lt;h1 id="introduction-to-natural-language-tokenizing">Introduction to Natural Language Tokenizing&lt;/h1>
&lt;p>If you are not familiar with the inner workings of Natural Language processing, tokenizing simply means that we separate a string and analyze it to find its semantic units. If you are writing a program that processes text, you may be tempted to split the string using a separator. For example, if you wanted to get all the words in a natural sentence string in an array, you would write something like this:&lt;/p></description></item><item><title>Matching Natural Language Text for Predefined Data Patterns on Apple's Devices</title><link>https://www.andyibanez.com/posts/matching-nl-nsdatadetector/</link><pubDate>Wed, 05 Feb 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/matching-nl-nsdatadetector/</guid><description>&lt;p>iOS has a lot of APIs that deal with natural language detection. One such class is &lt;a href="https://developer.apple.com/documentation/foundation/nsdatadetector">&lt;code>NSDataDetector&lt;/code>&lt;/a>. This class allows you to match different kinds of data in text, including dates, time, links, and more. This class, actually introduced a very long time ago (in the iOS 4.0 days!) makes it very easy to find this kind of data in strings. In this article we will explore how to use this very old class - whose documentation is Objective-C only at this time - in Swift, and how to do common tasks with it.&lt;/p></description></item><item><title>Recognizing Speech Locally on an iOS Device Using the Speech Framework</title><link>https://www.andyibanez.com/posts/speech-recognition-sfspeechrecognizer/</link><pubDate>Wed, 29 Jan 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/speech-recognition-sfspeechrecognizer/</guid><description>&lt;p>As iOS becomes more advanced, features that we thought belonged to the long future start becoming more common place in today&amp;rsquo;s software. One such feature is speech recognition, which allows a device to take verbal input from a user, transcribe it into text, and do something with it.&lt;/p>
&lt;p>In iOS, we can do this using a framework called &lt;code>Speech&lt;/code>, and an object called &lt;code>SFSpeechRecognizer&lt;/code>. With this class, you can perform all kinds of speech recognition tasks.&lt;/p></description></item><item><title>Generating Feedback Haptics with UINotificationFeedbackGenerator</title><link>https://www.andyibanez.com/posts/haptics-with-uinotificationfeedbackgenerator/</link><pubDate>Wed, 22 Jan 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/haptics-with-uinotificationfeedbackgenerator/</guid><description>&lt;p>A few weeks ago, we talked about how we could &lt;a href="https://www.andyibanez.com/posts/playing-custom-haptics-on-ios/">play custom haptic feedbacks with CHHapticEngine&lt;/a>. We saw how powerful and flexible that class is, letting us create different haptics for any context.&lt;/p>
&lt;p>Sometimes though, you want to play simpler haptics to let the user know that something has occurred. The &lt;code>CHHapticEngine&lt;/code> class can be overkill, and finding the right parameters to have interaction feedback can be very time consuming.&lt;/p>
&lt;p>There is a subclass of &lt;code>UIFeedbackGenerator&lt;/code> that actually exists since way before we got all the power &lt;code>CHHapticEngine&lt;/code>: &lt;code>UINotificationFeedbackGenerator&lt;/code> contains pre-made haptics to let users know when an action finished successfully, with an error, or a &amp;ldquo;warning&amp;rdquo; in the context of your app.&lt;/p></description></item><item><title>CryptoKit and the Secure Enclave</title><link>https://www.andyibanez.com/posts/cryptokit-secure-enclave/</link><pubDate>Wed, 15 Jan 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/cryptokit-secure-enclave/</guid><description>&lt;p>CryptoKit and the Secure Enclave&lt;/p>
&lt;p>Apple&amp;rsquo;s &lt;a href="https://www.andyibanez.com/posts/common-cryptographic-operations-with-cryptokit/">CryptoKit&lt;/a> introduced this year is full of amazing features. Not only does it offer very easy to use cryptography, but it also offers an interface to a security feature that Apple introduced less than a decade ago: The Secure Enclave.&lt;/p>
&lt;p>The Secure Enclave is a hardware feature for helping the system work with cryptographically secure data. In this article, we will build upon our previous CryptoKit knowledge (see the article linked above), and we will also learn what the Secure Enclave is all about.&lt;/p></description></item><item><title>Implementing Parametrizable Shortcut Actions for your iOS Apps</title><link>https://www.andyibanez.com/posts/parametrized-shortcuts/</link><pubDate>Wed, 08 Jan 2020 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/parametrized-shortcuts/</guid><description>&lt;p>All the way back to 2016, a group of very talented iOS developers released &lt;a href="workflow.is">Workflow&lt;/a>, a very popular app to let users create actions of different kinds within the system&amp;rsquo;s constraints. You could create and automate different tasks, such as controlling a server via SSH, downloading all the images from a website, and more&amp;hellip; Much, much more.&lt;/p>
&lt;p>Apple saw the power of the app and &lt;a href="https://techcrunch.com/2017/03/22/apple-has-acquired-workflow-a-powerful-automation-tool-for-ipad-and-iphone/">acquired&lt;/a> it in March 2017. This was very exciting, but we didn&amp;rsquo;t hear anything from the app since. Until WWDC 2018. Apple revealed a new app: Shortcuts. This app was built on top of Workflow, and as an Apple app, it allowed it to do many things that Workflow just wasn&amp;rsquo;t allowed to do, such as toggling system settings, integrating it with other apps (!!), and it was also natively integrated into Siri.&lt;/p></description></item><item><title>Happy New 2020!</title><link>https://www.andyibanez.com/posts/happy-new-years-2020/</link><pubDate>Wed, 01 Jan 2020 00:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/happy-new-years-2020/</guid><description>&lt;p>I just wanted to take a moment to wish you all a happy new year and to, to those who have been following me, for reading my weekly blog on iOS development since August.&lt;/p>
&lt;p>As you may know, I originally started blogging in 2011 as a college freshman, mostly writing to document the new things I learned regarding iOS development. I had absolutely no consistency with how often I wrote. And in the timeframe the blog was alive (2011 - pre-August 2019), there were some pretty big gaps between articles - some spanning years.&lt;/p></description></item><item><title>Privacy Policy</title><link>https://www.andyibanez.com/privacy-policy/</link><pubDate>Tue, 31 Dec 2019 18:38:56 -0400</pubDate><guid>https://www.andyibanez.com/privacy-policy/</guid><description>&lt;p>This website is pretty simple, and so is this privacy policy. Here&amp;rsquo;s what you should know:&lt;/p>
&lt;ol>
&lt;li>
&lt;p>&lt;strong>Hosting&lt;/strong>: This site is hosted on GitHub Pages. GitHub may log your IP address or other metadata when you visit. Please refer to &lt;a href="https://docs.github.com/en/site-policy/privacy-policies/github-privacy-statement">GitHubâs Privacy Policy&lt;/a> for details.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Analytics&lt;/strong>: I use Google Analytics to understand how people find and use my content. I donât care about tracking individuals, and I donât attempt to personally identify anyone. I mostly look at page views, referral sources, and traffic trends.&lt;/p></description></item><item><title>AIiCloudSync</title><link>https://www.andyibanez.com/projects/aiicloudsync/</link><pubDate>Tue, 31 Dec 2019 17:27:58 -0400</pubDate><guid>https://www.andyibanez.com/projects/aiicloudsync/</guid><description>&lt;p>&lt;a href="https://github.com/AndyIbanez/AIiCloudSync">GitHub Repository&lt;/a>&lt;/p>
&lt;hr>
&lt;h1 id="aiicloudsync">AIiCloudSync&lt;/h1>
&lt;p>AIiCloudSync is a simple Package written in Swift to synchronize specific UserDefaults with the iCloud Key Value store (&lt;code>NSUbiquitousKeyValueStore&lt;/code>).&lt;/p>
&lt;p>To use this package, create a single instance of &lt;code>AIiCloudSync&lt;/code>, and keep a reference to it. Once you create it, you don&amp;rsquo;t need to worry about it any longer. It will automatically sync changes between iCloud and your local UserDefaults through the lifetime of your application. You can optionally receive notifications when the iCloud Syncs change so you can react accordingly.&lt;/p></description></item><item><title>Modern Backgrounds Tasks in iOS 13</title><link>https://www.andyibanez.com/posts/modern-background-tasks-ios13/</link><pubDate>Wed, 25 Dec 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/modern-background-tasks-ios13/</guid><description>&lt;p>In the &lt;a href="https://www.andyibanez.com/posts/background-execution-in-ios/">article from last week&lt;/a>, we explored the basic background execution APIs introduced since iOS 7. We explored how we could request additional time for a task to complete after entering the background, how we could defer downloads with URLSession, and how we could use silent push notifications to trigger background tasks.&lt;/p>
&lt;p>The story with background tasks does not end there. iOS 13 introduced more APIs to do better background tasks, and that allow you to do things that weren&amp;rsquo;t possible before. Apple gave us the new shiny &lt;a href="https://developer.apple.com/documentation/backgroundtasks">&lt;code>BackgroundTasks&lt;/code>&lt;/a> framework on WWDC2019. This framework gives developers more flexibility and less constraints to execute code while their apps are in the background. Not only that, but the old Background App Refresh APIs have now been deprecated in favor of a new, modern way to perform them for your app. This changes unifies with the new Background Processing tasks which lets you do more work in the background, while a device is charging, and more.&lt;/p></description></item><item><title>Background Execution on iOS</title><link>https://www.andyibanez.com/posts/background-execution-in-ios/</link><pubDate>Wed, 18 Dec 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/background-execution-in-ios/</guid><description>&lt;p>In the early days of iOS development, developers had no way at all to perform background tasks beyond a very limited constraints of tasks, like music playback. Modern demands go beyond allowing people to play music in your app while they use a different app, and we as developers need to adapt to these changes. VoIP, lengthy networking, and even silent pushes to keep an app updated are very common these days, and fulfilling these demands used to be hard, if not outright impossible.&lt;/p></description></item><item><title>Formatting Relative Dates With RelativeDateTimeFormatter</title><link>https://www.andyibanez.com/posts/formatting-relative-dates-relativedatetimeformatter/</link><pubDate>Wed, 11 Dec 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/formatting-relative-dates-relativedatetimeformatter/</guid><description>&lt;p>Formatting Relative Dates With RelativeDateTimeFormatter&lt;/p>
&lt;p>A few weeks ago we talked about &lt;a href="https://www.andyibanez.com/posts/nsformatter/">formatting content with NSFormatter&lt;/a>, an abstract class from which multiple formatting classes inherit from to allow you to format different kinds of data in a human-readable form. &lt;code>NSFormatter&lt;/code> is not only a class you can inherit from yourself, but as iOS evolves, more formatters will be added to its family. This week, we will explore a new member of this family introduced in iOS 13: &lt;code>RelativeDateTimeFormatter&lt;/code>.&lt;/p></description></item><item><title>UserDefaults and Property Wrappers</title><link>https://www.andyibanez.com/posts/nsuserdefaults-property-wrappers/</link><pubDate>Wed, 04 Dec 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/nsuserdefaults-property-wrappers/</guid><description>&lt;hr>
**Important Note**
&lt;p>Soon after I published this article, Christian Tietze wrote a fair criticism of this idea &lt;a href="https://christiantietze.de/posts/2019/12/userdefaults-property-wrappers/">here&lt;/a>.&lt;/p>
&lt;p>Once you understand how property wrappers work, you can use this article to apply it to user defaults. The main idea is that property wrappers allow you to store your values differently and even externally. That said, you may or may not want to implement this in a real app. I recommend you read this article first, and then go back to Christian&amp;rsquo;s to see more downsides of this idea other than the ones I mentioned below.&lt;/p></description></item><item><title>Understanding Property Wrappers in Swift</title><link>https://www.andyibanez.com/posts/understanding-property-wrappers-swift/</link><pubDate>Wed, 27 Nov 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/understanding-property-wrappers-swift/</guid><description>&lt;p>Swift 5.1 introduced a sleuth of wonderful features, and amongst them, there&amp;rsquo;s one that is essential for SwiftUI: Property Wrappers. Property wrappers are a powerful feature in Swift that allow you to wrap behavior along with properties. This allows us to do some interesting things. If you have seen SwiftUI, you&amp;rsquo;ve seen the &lt;code>@State&lt;/code> &amp;ldquo;keyword&amp;rdquo;, and you know that it allows you to modify structs. This is possible thanks to the behavior &amp;ldquo;wrapped&amp;rdquo; within properties marked with it.&lt;/p></description></item><item><title>Intercepting Network Traffic with mitmproxy</title><link>https://www.andyibanez.com/posts/intercepting-network-mitmproxy/</link><pubDate>Wed, 20 Nov 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/intercepting-network-mitmproxy/</guid><description>&lt;p>If you have been programming mobile apps for a while, you must have used a web based API - JSON based or otherwise - and you have had to deal with bugs related to your requests and responses to a web service. You have likely asked yourself why some parsing code is not working as expected, or why a request seems to have an invalid format. Intercepting your own network calls with a proxy can help you find the answer to these questions.&lt;/p></description></item><item><title>New Search APIs in iOS 13</title><link>https://www.andyibanez.com/posts/ios13-new-search-apis/</link><pubDate>Wed, 13 Nov 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/ios13-new-search-apis/</guid><description>&lt;p>iOS has always provided interesting search APIs, but they have always been limited and doing the most interesting tasks required you to either write your own implementation or use private APIs.&lt;/p>
&lt;p>iOS 13 has provided some very nice improvements to the UI search APIs. In this article we will talk about two of them.&lt;/p>
&lt;h1 id="uisearchbar-finally-exposes-its-text-field">UISearchBar finally exposes its text field&lt;/h1>
&lt;p>I have been using &lt;code>UISearchController&lt;/code> and &lt;code>UISearchBar&lt;/code> for a &lt;em>very&lt;/em> long time, and I have always found it bizarre that Apple didn&amp;rsquo;t expose its underlying text field property. As of iOS 13, the search bar finally exposes it, in the form of a &lt;a href="https://developer.apple.com/documentation/uikit/uisearchtextfield">&lt;code>UISearchTextField&lt;/code>&lt;/a> object.&lt;/p></description></item><item><title>TranslateBO</title><link>https://www.andyibanez.com/bolivia/translatebo/</link><pubDate>Mon, 11 Nov 2019 12:05:19 -0400</pubDate><guid>https://www.andyibanez.com/bolivia/translatebo/</guid><description>&lt;p>This article is translated to both English and Spanish.&lt;/p>
&lt;p>[ENGLISH]&lt;/p>
&lt;p>Hello everyone. A few hours ago, I made a call to all those who speak different languages to translate tweets to different languages. The number of requests and support has been very overwhelming, and I am very positively surprised with it.&lt;/p>
&lt;p>Originally, we were going to do everything in a Telegram group, but the amount of requests I received to join has been overwhelming! So, this is how we are going to work:&lt;/p></description></item><item><title>When CryptoKit is not Enough</title><link>https://www.andyibanez.com/posts/cryptokit-not-enough/</link><pubDate>Wed, 06 Nov 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/cryptokit-not-enough/</guid><description>&lt;p>&lt;em>This article is a continuation to my &lt;a href="https://www.andyibanez.com/posts/common-cryptographic-operations-with-cryptokit/%5D">Common Cryptographic Operations with CryptoKit&lt;/a> article. If you want to learn how to use CryptoKit, read that one instead, and come to this one when you need a feature not offered by it.&lt;/em>&lt;/p>
&lt;p>As I have been playing with the amazing CryptoKit framework in the past few weeks, I have discovered a few more things that CryptoKit currently doesn&amp;rsquo;t do. This is not generally a bad thing, and I &lt;em>think&lt;/em> these limitations are related to what seem to be the goal of the framework:&lt;/p></description></item><item><title>Introduction to Patterns and Pattern Matching in Swift.</title><link>https://www.andyibanez.com/posts/pattern-matching/</link><pubDate>Wed, 30 Oct 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/pattern-matching/</guid><description>&lt;p>Swift is a beautiful language, but it hides some powerful features from developers who come from more &amp;ldquo;old-style&amp;rdquo; programming languages such as C++ and Java. One such feature is Pattern Matching, and it allows you to write some cleaner code when dealing with some operations.&lt;/p>
&lt;p>For example, consider casting. Casting is a feature in the vast majority of statically-typed languages. Casting is considered to be an ugly operation by some, because when you need to cast, it&amp;rsquo;s usually because the language has a flaw that prevents it from telling you about the right data type underneath. This is specially true when you add in Object-Oriented Programming and classes are marked to return a super type instead of a specific subtype. With pattern matching, you can more cleanly check for datatypes without having to worry about crashes or weird behavior.&lt;/p></description></item><item><title>Understanding and Implementing NSNotificationCenter on Apple's Platforms</title><link>https://www.andyibanez.com/posts/nsnotificationcenter/</link><pubDate>Wed, 23 Oct 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/nsnotificationcenter/</guid><description>&lt;p>Sometimes when you are writing an app, you need to be notified of events occurring somewhere else in the system - either in your own app, or in the operating system - and react to them accordingly. For example, you may be an app like Snapchat and you want to know when a screenshot has been taken. This is a system notification that you can &amp;ldquo;listen&amp;rdquo; to in order to react. If you have an app like a photo gallery, you may need to know when the user adds a new photo so you can update all relevant UI and make other necessary updates.&lt;/p></description></item><item><title>Filtering Arrays with Predicates</title><link>https://www.andyibanez.com/posts/filtering-arrays-nspredicate/</link><pubDate>Wed, 16 Oct 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/filtering-arrays-nspredicate/</guid><description>&lt;p>Whether you have been programming for a while or are new at it, chances are you have had the need to search for results in an array. And while Apple&amp;rsquo;s SDKs for iOS, macOS, iPadOS, and watchOS all use Foundation and have a set of handy tools to make that task easier, there is one particular API that is very powerful but doesn&amp;rsquo;t get much use unless you pair with other frameworks such as Core Data: NSPredicate.&lt;/p></description></item><item><title>Common Cryptographic Operations With CryptoKit</title><link>https://www.andyibanez.com/posts/common-cryptographic-operations-with-cryptokit/</link><pubDate>Wed, 09 Oct 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/common-cryptographic-operations-with-cryptokit/</guid><description>&lt;p>Apple has always taken security very seriously, so it&amp;rsquo;s expected that they would provide developers with the same tools they have to help developers implement the same security measures in their apps. This year, Apple introduced &lt;code>CryptoKit&lt;/code>.&lt;/p>
&lt;p>Apple providing new cryptography tools is nothing new. They have provided the &lt;code>Security&lt;/code> framework for a &lt;em>very&lt;/em> long time, and a few years later they introduced &lt;code>CommonCrypto&lt;/code>. The problem with these frameworks is that they can be very low level, being written in C, and it can be intimidating for new developers to adopt them in their project. &lt;code>CryptoKit&lt;/code> abstracts a lot of the details and it provides easier interfaces for common operations such as hashing, encrypting, and even signing.&lt;/p></description></item><item><title>Playing Custom Haptics on iOS</title><link>https://www.andyibanez.com/posts/playing-custom-haptics-on-ios/</link><pubDate>Wed, 02 Oct 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/playing-custom-haptics-on-ios/</guid><description>&lt;p>Vibration and physical feedback has become an important feature of Apple&amp;rsquo;s operating systems. Starting with the Apple Watch, Apple replaced the traditional vibration feedback with haptic feedback hardware, which allowed them to have more control over how vibrations and physical feedback work.&lt;/p>
&lt;p>First being introduced in the Apple Watch, Haptic Feedback has been a core part of the Apple ecosystem experience since. Just think about it, wouldn&amp;rsquo;t it be weird if you force-touched the screen to do something, and there was no physical response from the device? Think of the old Peek-and-Pop. If you updated to iOS 13 and got context menus, you may feel they feel great to do in iOS (because they have a haptic engine), but on iPad they feel lacking because the device doesn&amp;rsquo;t vibrate when triggering them.&lt;/p></description></item><item><title>Formatting Content with NSFormatter</title><link>https://www.andyibanez.com/posts/nsformatter/</link><pubDate>Wed, 25 Sep 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/nsformatter/</guid><description>&lt;p>Very often, we need to deal with data in a &amp;ldquo;raw&amp;rdquo; format that, if displayed directly to the user, it makes little sense to them. This kind of data includes a date timestamp, the number of bytes in a big file, or numbers with no rounding a bunch of decimals. There is a lot of data like this, and we need to be able to format it and show it to the user.&lt;/p></description></item><item><title>Understanding the Essentials for Adopting Multiwindow Support on iPadOS</title><link>https://www.andyibanez.com/posts/ipad-multiwindow-support/</link><pubDate>Wed, 18 Sep 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/ipad-multiwindow-support/</guid><description>&lt;p>On WWDC2019, Apple decided to fork iOS into two different operating systems: iOS for iPhones, and iPadOS for iPads. This is to recognize the iPad as its own independent entity that has its own set of features compared to iOS. Amongst those features, iPadOS adds Multiwindow support, which allows our apps to run in more than one Window at the same time.&lt;/p>
&lt;h1 id="what-exactly-is-multi-window-support-and-how-does-it-work">What exactly is Multi-window support, and how does it work?&lt;/h1>
&lt;p>iOS 9 introduced the Slide Over and Split Screen features for iPad, which allowed us to run two different apps side by side at the same time. Multi-window support on iPadOS allows you to do this with two windows of your own app, and more.&lt;/p></description></item><item><title>Understanding the Result Type in Swift</title><link>https://www.andyibanez.com/posts/swift-result-type/</link><pubDate>Wed, 11 Sep 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/swift-result-type/</guid><description>&lt;p>Error handling when expecting a result out of an operation is a very common thing to do. For this reason, various high-level programming languages have introduced a &lt;code>Result&lt;/code> type into their libraries, on top of their existing error-handling features. This feature was implemented in Swift 5.&lt;/p>
&lt;p>A &lt;code>Result&lt;/code> wraps a success or a failure. It is essentially an &lt;code>enum&lt;/code> with two possible cases: &lt;code>.success&lt;/code> and &lt;code>.failure&lt;/code>. The &lt;code>.success&lt;/code> case wraps the correct result of an operation, whereas a &lt;code>.failure&lt;/code> wraps an &lt;code>Error&lt;/code>. Its implementation uses generics, so you always know what you are going to get back.&lt;/p></description></item><item><title>Building URLs With NSURLComponents</title><link>https://www.andyibanez.com/posts/building-urls-with-nsurlcomponents/</link><pubDate>Wed, 04 Sep 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/building-urls-with-nsurlcomponents/</guid><description>&lt;p>If you have been programming for Apple platforms for a while, chances are you have seen (or maybe even wrote yourself) a line of code that looks like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-swift" data-lang="swift">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f38ba8">let&lt;/span> &lt;span style="color:#f5e0dc">url&lt;/span> = URL(string: &lt;span style="color:#a6e3a1">&amp;#34;https://www.google.com/search?hl=en&amp;amp;q=pullip&amp;#34;&lt;/span>)&lt;span style="color:#89dceb;font-weight:bold">!&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Whether you wrote it yourself or someone else did it, one thing is clear: This is not a safe way to build URLs. Can you know, for sure, that your URL is actually valid? Intuitively, all of us can see a URL and see if it&amp;rsquo;s valid, but there is a &lt;a href="http://www.faqs.org/rfcs/rfc1738.html">whole lot of governing&lt;/a> in the URL format that at some point we may find funny URLs that look valid and aren&amp;rsquo;t, or the other way around; they look invalid, but aren&amp;rsquo;t.&lt;/p></description></item><item><title>Caching Content With NSCache</title><link>https://www.andyibanez.com/posts/caching-content-with-nscache/</link><pubDate>Wed, 28 Aug 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/caching-content-with-nscache/</guid><description>&lt;p>When we are working with apps on iOS, iPadOS, macOS, watchOS, or TVOS, it&amp;rsquo;s possible that at some point we will have to store and retrieve a lot of temporary data throughout the lifecycle of our software. Depending on our needs, we may need to cache data on disk and manually manage it ourselves, or we may only need it to cache it in memory. In the case of the latter, Apple offers &lt;code>NSCache&lt;/code>, a mutable collection that lets us cache files in memory using key-value pairs.&lt;/p></description></item><item><title>Old Content</title><link>https://www.andyibanez.com/old-content/</link><pubDate>Thu, 22 Aug 2019 15:30:53 -0400</pubDate><guid>https://www.andyibanez.com/old-content/</guid><description>&lt;p>It looks like you followed a link to a very old article or tutorial. When I worked on my new website, I went through all my posts and just migrated the ones that are still relevant. Some old posts were not irrelevant per se, but the way they were written don&amp;rsquo;t really apply anymore.&lt;/p>
&lt;p>If you still want to read the original post of the link that got you here, you can download an archived version of my website and look for it there. This archive is a fully usable local copy of my old website, and you will definitely find the article you were looking for.&lt;/p></description></item><item><title>Exploring the NSOperation APIs for Apple's Platforms</title><link>https://www.andyibanez.com/posts/exploring-the-nsoperation-apis/</link><pubDate>Wed, 21 Aug 2019 07:00:00 -0400</pubDate><guid>https://www.andyibanez.com/posts/exploring-the-nsoperation-apis/</guid><description>&lt;p>&lt;em>The original title for this article was posted on my old website in 2012 and it was titled &amp;ldquo;Multithreading on iOS And Mac OS X Using NSOperations&amp;rdquo;. The original examples were written in Objective-C. This article has been rewritten from scratch not only to give the examples in Swift, but also to improve the quality of the old article. It has been shortened, and both language and tone have been revised.&lt;/em>&lt;/p></description></item><item><title>rclone: From Basics to Encryption</title><link>https://www.andyibanez.com/posts/rclone-basics-encryption/</link><pubDate>Tue, 20 Aug 2019 13:59:15 -0400</pubDate><guid>https://www.andyibanez.com/posts/rclone-basics-encryption/</guid><description>&lt;p>&lt;em>The original version of this article was titled &amp;ldquo;rclone and Encryption Tutorial&amp;rdquo; and was posted in the old version of my website. The original article was written in February 2017 for a much older version of rclone. This revised article covers rclone 1.48, and it has been rewritten from scratch to improve its quality. The examples used in the original article have been kept.&lt;/em>&lt;/p>
&lt;p>&lt;a href="https://rclone.org/">&lt;code>rclone&lt;/code>&lt;/a> is a command line tool, similar to &lt;a href="https://linux.die.net/man/1/rsync">&lt;code>rsync&lt;/code>&lt;/a>, with the difference that it can sync, move, copy, and in general do other file operations on cloud storage services, such as Dropbox and Google Drive. You can use &lt;code>rclone&lt;/code> to create backups of your servers or personal computers or to simply store your files in the cloud, optionally adding encryption.&lt;/p></description></item><item><title>Next Anime Episode Privacy Policy</title><link>https://www.andyibanez.com/privacy-policies/nae1/</link><pubDate>Mon, 19 Aug 2019 22:29:10 -0400</pubDate><guid>https://www.andyibanez.com/privacy-policies/nae1/</guid><description>&lt;h1 id="note">NOTE&lt;/h1>
&lt;p>This app has been transferred to &lt;a href="https://www.alonwaller.com">Alon Waller&lt;/a>, effective Feb 11, 2021. This privacy policy no longer applies.&lt;/p>
&lt;hr>
&lt;p>Andy Ibanez K built the Next Anime Episode app as a Commercial app. This SERVICE is provided by Andy Ibanez K and is intended for use as is.&lt;/p>
&lt;p>This page is used to inform visitors regarding my policies with the collection, use, and disclosure of Personal Information if anyone decided to use my Service.&lt;/p></description></item><item><title>Silvianna for Anilist - Privacy Policy</title><link>https://www.andyibanez.com/privacy-policies/privacy_policy_silvianna/</link><pubDate>Mon, 19 Aug 2019 22:29:10 -0400</pubDate><guid>https://www.andyibanez.com/privacy-policies/privacy_policy_silvianna/</guid><description>&lt;p>The Privacy Policy for Silvianna can be resumed in one sentence:&lt;/p>
&lt;p>&lt;em>Silvianna will not store your information, personal or otherwise, in any third-party servers not owned by Anilist.co, Apple, RevenueCat, or GitHub.&lt;/em>&lt;/p>
&lt;p>Silvianna is a client for &lt;a href="https://anilist.co">https://anilist.co&lt;/a> (hereafter simply called &amp;ldquo;Anilist&amp;rdquo;), the popular anime and manga database service. As such, Silvianna will interact with Anilist in order to do any work at all. With Silvianna, you can view information stored on Anilist, and that includes any personal information you may have provided to them.&lt;/p></description></item><item><title>Next Anime Episode</title><link>https://www.andyibanez.com/projects/nextanimeepisode1/</link><pubDate>Mon, 08 May 2017 21:06:00 -0400</pubDate><guid>https://www.andyibanez.com/projects/nextanimeepisode1/</guid><description>&lt;h1 id="important-note">IMPORTANT NOTE&lt;/h1>
&lt;p>While I am the original developer of this app, it has since been transferred to &lt;a href="https://www.alonwaller.com">Alon Waller&lt;/a>, so I can no longer offer support for the app.&lt;/p>
&lt;hr>
&lt;p>&lt;img src="https://www.andyibanez.com/img/nextanimeepisode1.png" alt="Next Anime Episode 1">&lt;/p>
&lt;p>&lt;a href="https://apps.apple.com/us/app/next-anime-episode/id1227965532">Download on the App Store&lt;/a> | &lt;a href="https://www.andyibanez.com/privacy-policies/nae1">Privacy Policy&lt;/a>&lt;/p>
&lt;p>Next Anime Episode does one job: To help you keep track of airing anime and when they will have a new episode available in Japan.&lt;/p>
&lt;p>Generally, sub based simulcast streaming services have the newest episodes available within one hour after they air in Japan.&lt;/p></description></item><item><title>Fsduplicates</title><link>https://www.andyibanez.com/projects/fsduplicates/</link><pubDate>Sun, 26 Jun 2016 19:49:00 -0400</pubDate><guid>https://www.andyibanez.com/projects/fsduplicates/</guid><description>&lt;p>&lt;img src="https://www.andyibanez.com/img/fsduplicates.png" alt="fsduplicates">&lt;/p>
&lt;p>&lt;em>Discontinued project. Developed in 2016&lt;/em>&lt;/p>
&lt;p>Command line tool to detect duplicate songs in OS X/macOS based on their Audio Fingerprints.&lt;/p>
&lt;p>fsduplicates helps you find song duplicates recursively in any specific directory and output its findings in a different directory. With the generated results you can later analyse and take action on duplicate songs. The results are in plain text files, which you can analyse using any tool, like Unix standard commands, or fsduplicatesâ tools.&lt;/p></description></item><item><title>Mignori Box</title><link>https://www.andyibanez.com/projects/mignoribox/</link><pubDate>Wed, 26 Mar 2014 19:13:00 -0400</pubDate><guid>https://www.andyibanez.com/projects/mignoribox/</guid><description>&lt;p>&lt;img src="https://www.andyibanez.com/img/mignoribox.png" alt="Mignori Box">&lt;/p>
&lt;p>&lt;em>Discontinued project. Developed in 2014.&lt;/em>&lt;/p>
&lt;p>Mignori Box was a service to download your &lt;a href="https://www.andyibanez.com/projects/mignori1/">Mignori 1&lt;/a> collections to your computer.&lt;/p>
&lt;p>The website was built using the classic web technologies. Twitter Bootstrap and jQuery for the front-end, PHP and even Bash for the backend. The site was hosted in a VPS provided by DigitalOcean.&lt;/p></description></item><item><title>Mignori 1</title><link>https://www.andyibanez.com/projects/mignori1/</link><pubDate>Mon, 03 Mar 2014 17:17:17 -0400</pubDate><guid>https://www.andyibanez.com/projects/mignori1/</guid><description>&lt;p>&lt;img src="https://www.andyibanez.com/img/mignori1.png" alt="Mignori 1">&lt;/p>
&lt;p>&lt;em>Discontinued project, but a new version is in the works. Developed in 2014.&lt;/em>&lt;/p>
&lt;p>Mignori is a mobile client to use with -booru or -booru based sites (Gelbooru and Danbooru, to name a few).&lt;/p>
&lt;p>A -booru imageboard is simply a board where people post pictures and tag with them relevant attributes. This allows other users to search for images in these boards and find images with the qualities theyâre looking for.&lt;/p></description></item><item><title>Leopaster</title><link>https://www.andyibanez.com/projects/leopaster/</link><pubDate>Sat, 04 Jan 2014 22:15:00 -0400</pubDate><guid>https://www.andyibanez.com/projects/leopaster/</guid><description>&lt;p>&lt;img src="https://www.andyibanez.com/img/leopaster.png" alt="Leopaster">&lt;/p>
&lt;p>&lt;em>Discontinued project. Developed in 2015&lt;/em>&lt;/p>
&lt;p>Quick Status Bar Menu on OS X that allows you to quickly paste code on @DHowettâs ghostbin.com.&lt;/p>
&lt;p>ghostbin.com is a simple pasteboard service that allows people to paste code or any other text and to quickly share a link to them. These services allow developers to share code snippets faster to either request help with an specific piece of code, or to help others with theirs (Other uses may apply).&lt;/p></description></item><item><title>Cecrecy</title><link>https://www.andyibanez.com/projects/cecrecy/</link><pubDate>Sat, 04 Jan 2014 22:07:00 -0400</pubDate><guid>https://www.andyibanez.com/projects/cecrecy/</guid><description>&lt;p>&lt;img src="https://www.andyibanez.com/img/cecrecy.png" alt="Cecrecy">&lt;/p>
&lt;p>&lt;em>Discontinued project. Developed in 2013.&lt;/em>&lt;/p>
&lt;p>If you want to protect app data from your friends or family that are constantly asking for your iDevice, there are a couple of things you can do: You can tell them not to enter certain apps, empowering their curiosity and therefore exposing your private data, or you can passcode-lock certain apps, which if they see, they will just wonder what youâre hiding that they canât see.&lt;/p></description></item><item><title>Maulencer</title><link>https://www.andyibanez.com/projects/maulencer/</link><pubDate>Sat, 04 Jan 2014 21:58:00 -0400</pubDate><guid>https://www.andyibanez.com/projects/maulencer/</guid><description>&lt;p>&lt;img src="https://www.andyibanez.com/img/maulencer.png" alt="Maulencer">&lt;/p>
&lt;p>&lt;em>Discontinued project. Developed in 2013.&lt;/em>&lt;/p>
&lt;p>A friend of mine had his hardware ringer of his phone die on him. Because of that, toggling the ringer on and off was quite a chore for him. Without installing SBSettings or anything equivalent to that, he had to go to the settings app and toggle the ringer on and off there.&lt;/p>
&lt;p>So he asked me to write an icon on SpringBoard that would toggle the ringer. And here it is. Itâs a really, really simple tweak. In developer circles it probably isnât worth anyoneâs time. But anyway, I decided to release to the public and here it is.&lt;/p></description></item><item><title>Sideswitch Toggles</title><link>https://www.andyibanez.com/projects/sideswitch-toggles/</link><pubDate>Sat, 04 Jan 2014 21:46:00 -0400</pubDate><guid>https://www.andyibanez.com/projects/sideswitch-toggles/</guid><description>&lt;p>&lt;img src="https://www.andyibanez.com/img/sideswitch-toggles.png" alt="Sideswitch Toggles">&lt;/p>
&lt;p>&lt;em>Discontinued project. Developed in 2012.&lt;/em>&lt;/p>
&lt;p>Sideswitch Toggles is a MobileSubstrate tweak that gives you full control over your iPhoneâs Ringer (and as such, it isnât available for the iPod Touch). The tweak simply modifies the action that happens when you toggle the ringer on and off.&lt;/p>
&lt;p>By default, Sideswitch Toggles comes with the ability to toggle Bluetooth, Wi-Fi, Airplane Mode, and Do Not Disturb. The capabilities of Sideswitch can be easily extended by other developers.&lt;/p></description></item><item><title>Silight</title><link>https://www.andyibanez.com/projects/silight/</link><pubDate>Sat, 04 Jan 2014 21:39:00 -0400</pubDate><guid>https://www.andyibanez.com/projects/silight/</guid><description>&lt;p>&lt;img src="https://www.andyibanez.com/img/silight.png" alt="SiLight">&lt;/p>
&lt;p>&lt;em>Discontinued project. Developed in 2011&lt;/em>&lt;/p>
&lt;p>SiLight is a small AssistantExtension that allows Siri to turn on your phoneâs torch to use it as a flashlight. SiLight is a real quick flashlight, since commands work in the Lockscreen too. SiLight was programmed having natural speech in mind, instead of talking to her like a robot (âflashlight onâ) you can ask her as you would ask anyone (âI need a flashlightâ, âSiri, thereâs a blackoutâ). It also features some hidden surprises for geeks.&lt;/p></description></item><item><title>Combox</title><link>https://www.andyibanez.com/projects/combox/</link><pubDate>Sat, 04 Jan 2014 18:54:00 -0400</pubDate><guid>https://www.andyibanez.com/projects/combox/</guid><description>&lt;p>&lt;img src="https://www.andyibanez.com/img/combox.png" alt="Combox">&lt;/p>
&lt;p>&lt;em>Discontinued project. Developed in 2012.&lt;/em>&lt;/p>
&lt;p>Combox is a third-party client for Dropbox.&lt;/p>
&lt;p>Do you love Dropbox? Dropbox is a very nifty service that allows you to store your files in the cloud. With Dropbox, you can upload and download your documents and photos anywhere, any time.&lt;/p>
&lt;p>Why a third-party client? This app was made with Dropbox lovers and Power Users in mind. It offers many features that no other Dropbox clients for iOS offer.&lt;/p></description></item><item><title>SBConverter</title><link>https://www.andyibanez.com/projects/sb-converter/</link><pubDate>Sat, 04 Jan 2014 18:25:00 -0400</pubDate><guid>https://www.andyibanez.com/projects/sb-converter/</guid><description>&lt;p>&lt;img src="https://www.andyibanez.com/img/sb-converter.png" alt="SB Converter">&lt;/p>
&lt;p>&lt;em>Discontinued project. Developed in 2011.&lt;/em>&lt;/p>
&lt;p>A very complete base number converter for programmers and computer science students.
Super Base Converter (SBConverter) is a very powerful base number conversion tool. It offers a simple and intuitive user interface free of distractions to allow users to quickly convert from one number base to another.&lt;/p>
&lt;h3 id="features">Features:&lt;/h3>
&lt;ul>
&lt;li>Convert any number back and forth in any base from base 2 (binary) to base 16 (hexadecimal).&lt;/li>
&lt;li>Convert any number base up to base 64 (no support to convert numbers in base 17 or longer to any other base, sorry! But you can convert any number to these high bases).&lt;/li>
&lt;li>Fast and slick user interface: Transform any number to any base as you type it instead of tapping a âconvertâ button.&lt;/li>
&lt;li>Change number bases easily.&lt;/li>
&lt;/ul>
&lt;h3 id="changelog">Changelog:&lt;/h3>
&lt;h4 id="10">1.0&lt;/h4>
&lt;ul>
&lt;li>Initial Release.&lt;/li>
&lt;/ul></description></item><item><title>Contact Me</title><link>https://www.andyibanez.com/contact/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://www.andyibanez.com/contact/</guid><description>&lt;p>Thank you for your interest in contacting me. Select the best category from the dropdown. If you expect a reply, it might take me a few days to get back to you.&lt;/p>
&lt;p>Please note that due to personal policy, I do not reply back to emails asking for help with code or projects for free. If you need help, please select the &amp;ldquo;Contracting&amp;rdquo; option below. You will receive a response back with my rates before continuing.&lt;/p></description></item></channel></rss>